#!/usr/bin/env python3

import os
import pathlib
import shutil
import sys
import glob
import json

THIS_DIR = pathlib.Path(os.path.dirname(os.path.abspath(__file__)))
CONFIG = json.loads(open(THIS_DIR / "setup.json").read())

def firefox() -> None:
    for profile in glob.glob(str(pathlib.Path.home() / ".mozilla" / "firefox") + "/*.default"):
        make_link(
            pathlib.Path(THIS_DIR) / "home" / "firefox.css",
            pathlib.Path(profile) / "chrome" / "userChrome.css"
        )

def git_clone(name: str, version: str, path: pathlib.Path, prefix="https://github.com"):
    group_name = os.path.basename(os.path.dirname(name))
    repo_name = os.path.basename(name)
    target = pathlib.Path(THIS_DIR / f"cache/modules/{group_name}/{repo_name}")

    # TODO: improve
    os.system(f'git clone --single-branch "{prefix}/{name}" "{target}" 2>&1 | grep -Ev "already exists"')
    os.system(f'git -C "{target}" checkout "{version}" 2>&1 | grep -Ev "(Already on|is up to date|HEAD is now)"')

    make_link(target, path)

def log(level: str, msg: str) -> None:
    msg = msg.replace(str(pathlib.Path.home()), '~')
    print(f"{level.upper()}: {msg}")


def make_link(src: pathlib.Path, dest: pathlib.Path) -> None:
    if not src.exists():
        log("error", f"link target does not exist: {src}")
        return

    if dest.is_symlink():
        rel_src = os.path.relpath(src, dest.parent)
        # symlink -> repoint symlink if different
        if dest.resolve() != src:
            old_src = dest.resolve()
            dest.unlink()
            dest.symlink_to(rel_src)
            log("info", f"change {old_src} -> {rel_src}")
    elif dest.exists():
        log("error", f"{dest} exists and is not a symlink")
    else:
        dest.parent.mkdir(parents=True, exist_ok=True)
        dest.symlink_to(os.path.relpath(src, dest.parent))
        log("info", f"link {dest} -> {src}")


def remove_link(link: pathlib.Path) -> None:
    if link.is_symlink():
        link.unlink()
        log("info", f"remove link {link}")

        for p in link.parents:
            try:
                p.rmdir()
            except OSError:
                break
            log("info", f"remove dir {p}")
    elif link.exists():
        log(f"error", f"{link} is not a symlink!")


def main() -> None:
    target_dir = pathlib.Path.home()

    action = 'link'
    if len(sys.argv) > 1 and sys.argv[1] == 'rm':
        action = 'rm'

    for package_name, files in CONFIG['files'].items():
        for f in files:
            src = THIS_DIR / "home" / pathlib.Path(f)
            dest = target_dir / pathlib.Path(f".{f}")
            if action == 'rm':
                remove_link(dest)
            else:
                if shutil.which(package_name):
                    make_link(src, dest)
                else:
                    remove_link(dest)

    for package_name, modules in CONFIG['modules'].items():
        for key, path in modules.items():
            url = key.split(':')[0]
            version = key.split(':')[-1]
            dest = pathlib.Path(os.path.expanduser(path))

            if shutil.which(package_name):
                if action == 'rm':
                    remove_link(dest)
                else:
                    git_clone(url, version, dest)
            else:
                remove_link(dest)

    firefox()


if __name__ == "__main__":
    main()
