#!/usr/bin/env python3

import os
import pathlib
import shutil
import sys

# 'binary_name': [ 'list', 'of', 'files' ]
CONFIG = {
    # TODO: 'firefox': ['.mozilla/firefox/*.default/chrome/userChrome.css']
    'awesome': ['.config/awesome'],
    'bash': ['.bashrc', '.bin'],
    'compton': ['.config/compton.conf'],
    'git': ['.gitconfig'],
    'htop': ['.config/htop'],
    'ipython': ['.ipython/profile_default/ipython_config.py'],
    'mpv': ['.config/mpv'],
    'nvim': ['.config/nvim/init.vim'],
    'ranger': ['.config/ranger/rc.conf', '.config/ranger/scope.sh'],
    'redshift': ['.config/redshift.conf'],
    'ssh': ['.ssh/config', '.hushlogin'],
    'subl3': ['.config/sublime-text-3/Packages/User'],
    'termite': ['.config/termite'],
    'tmux': ['.tmux.conf'],
    'vim': ['.vim/autoload/plug.vim', '.vim/snip', '.vimrc'],
    'zathura': ['.config/zathura'],
    'zsh': ['.zprofile', '.zshine', '.zshrc'],
    'X': ['.fonts', '.xinitrc', '.Xmodmap', '.gtkrc-2.0', '.fonts', '.config/fontconfig', '.config/gtk-3.0/settings.ini', '.icons/default/index.theme', '.config/user-dirs.dirs'],
}


def log(level: str, msg: str, replace_home=True) -> None:
    if replace_home:
        msg = msg.replace(str(pathlib.Path.home()), '~')
    print(f"{level.upper()}: {msg}")


def make_link(src: pathlib.Path, dest: pathlib.Path) -> None:
    if not src.exists():
        log("error", f"link target does not exist: {src}")
        return

    if dest.is_symlink():
        # symlink -> repoint symlink if different
        if dest.resolve() != src:
            old_src = dest.resolve()
            dest.unlink()
            dest.symlink_to(src)
            log("info", f"change {old_src} -> {src}")
    elif dest.exists():
        log("error", f"{dest} exists and is not a symlink")
    else:
        dest.parent.mkdir(parents=True, exist_ok=True)
        dest.symlink_to(src)
        log("info", f"link {dest} -> {src}")


def remove_link(link: pathlib.Path) -> None:
    if link.is_symlink():
        link.unlink()
        log("info", f"remove link {link}")

        for p in link.parents:
            try:
                p.rmdir()
            except OSError:
                break
            log("info", f"remove dir {p}")
    elif link.exists():
        log(f"error", f"{link} is not a symlink!")


def main() -> None:
    target_dir = pathlib.Path.home()
    package_dir = pathlib.Path(os.path.dirname(os.path.abspath(__file__)))

    action = 'link'
    if len(sys.argv) > 1 and sys.argv[1] == 'rm':
        action = 'rm'

    for package_name, files in CONFIG.items():
        for f in files:
            src = package_dir / package_name / pathlib.Path(f)
            dest = target_dir / pathlib.Path(f)
            if action == 'rm':
                remove_link(dest)
            else:
                if shutil.which(package_name):
                    make_link(src, dest)
                else:
                    remove_link(dest)


if __name__ == "__main__":
    main()
