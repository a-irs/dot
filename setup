#!/usr/bin/env python3

import os
from pathlib import Path
import shutil
import sys
import glob
import configparser
import tempfile
import subprocess

import urllib.request

THIS_DIR = Path(os.path.dirname(os.path.abspath(__file__)))

def log(level: str, msg: str) -> None:
    msg = msg.replace(str(Path.home()), '~')
    print(f"{level.upper()}: {msg}")


def handle_firefox(file_path_css, file_path_js, remove=False) -> None:
    paths = [
        ".mozilla/firefox",
        "Library/Application Support/Firefox/Profiles"
    ]
    for p in paths:
        for profile in glob.glob(str(Path.home() / Path(p)) + "/*.default*"):
            if remove:
                remove_link(Path(profile) / "chrome" / "userChrome.css")
                remove_link(Path(profile) / "user.js")
            else:
                make_link(Path(THIS_DIR) / file_path_css, Path(profile) / "chrome" / "userChrome.css")
                make_link(Path(THIS_DIR) / file_path_js, Path(profile) / "user.js")


def render_template(template, dest):
    with open(template, 'r') as fd_src:
        with tempfile.NamedTemporaryFile(mode='w+') as fd_tmp:
            for line in fd_src.readlines():
                if line.startswith("||"):
                    split = line.split("||")
                    hostname = split[1]
                    rest = "||".join(split[2:])
                    if os.uname()[1].lower() == hostname.lower():
                        fd_tmp.write(rest)
                else:
                    fd_tmp.write(line)
            fd_tmp.flush()

            shutil.copy(fd_tmp.name, dest)
    return dest


def handle_clone(url: str, version: str, path: Path):
    target = Path(THIS_DIR / f"cache/modules/{os.path.basename(url)}")

    # TODO: improve
    os.system(f'git clone "{url}" "{target}" 2>&1 | grep -Ev "already exists"')
    os.system(f'git -C "{target}" checkout "{version}" 2>&1 | grep -Ev "(Already on|is up to date|HEAD is now)"')

    make_link(target, path)

def handle_extract(url: str, subfolder: str, path: Path):
    target = Path(THIS_DIR / f"cache/modules/{os.path.basename(url)}")
    if not target.is_file():
        log("info", f'downloading {url} ...')
        urllib.request.urlretrieve(url, target)

    unpack_dir = Path(os.path.splitext(target)[0])
    if not unpack_dir.is_dir():
        log("info", f"unpacking to {unpack_dir} ...")
        shutil.unpack_archive(target, os.path.splitext(target)[0])

    make_link(unpack_dir / subfolder, path)


def make_link(src: Path, dest: Path) -> None:
    if not src.exists():
        tpl = Path(str(src) + ".tpl")
        if not tpl.exists():
            log("error", f"link target does not exist: {src}")
            return
        else:
            target = Path(THIS_DIR / f"cache/template/{dest.name}")
            target.parent.mkdir(parents=True, exist_ok=True)
            src = render_template(tpl, target)

    if dest.is_symlink():
        rel_src = os.path.relpath(src, dest.parent)
        # symlink -> repoint symlink if different
        if dest.resolve() != src.resolve():
            old_src = dest.resolve()
            dest.unlink()
            dest.symlink_to(rel_src)
            log("info", f"change {old_src} -> {rel_src}")
    elif dest.exists():
        log("error", f"{dest} exists and is not a symlink")
    else:
        dest.parent.mkdir(parents=True, exist_ok=True)
        dest.symlink_to(os.path.relpath(src, dest.parent))
        log("info", f"link {dest} -> {src}")


def remove_link(link: Path) -> None:
    if link.is_symlink():
        link.unlink()
        log("info", f"remove link {link}")

        for p in link.parents:
            try:
                p.rmdir()
            except OSError:
                break
            log("info", f"remove dir {p}")
    elif link.exists():
        log("error", f"{link} is not a symlink!")


def handle_systemd_user(unit: str, should_be_enabled: bool) -> None:
    file = Path(f"~/.config/systemd/user/default.target.wants/{unit}").expanduser()
    if not file.exists() and should_be_enabled:
        subprocess.run(["systemctl", "--user", "enable", unit], check=True, capture_output=True)
        log("info", f"enabled {unit}")
    if file.exists() and not should_be_enabled:
        subprocess.run(["systemctl", "--user", "disable", unit], check=True, capture_output=True)
        log("info", f"disabled {unit}")


def main() -> None:
    action = 'link'
    if len(sys.argv) > 1 and sys.argv[1] == 'rm':
        action = 'rm'

    config = configparser.ConfigParser(delimiters=('='))
    config.optionxform = str  # otherwise case of keys is not preserved
    config.read(THIS_DIR / "setup.conf")

    # MODULES (clone / download+extract)
    for section in [s for s in config.sections() if s.startswith("modules.")]:
        package_name = '.'.join(section.split('.')[1:])
        for key, path in config[section].items():
            if shutil.which(package_name):
                if action == 'link':
                    module_action = key.split('!')[0]
                    key = ''.join(key.split('!')[1:])
                    if module_action == "clone":
                        split = key.split('@')
                        url = key.split('@')[0]
                        if len(split) > 1:
                            version = key.split('@')[-1]
                        else:
                            version = 'master'
                        dest = THIS_DIR / "home" / Path(os.path.expanduser(path))
                        handle_clone(url, version, dest)
                    elif module_action == "extract":
                        split = key.split('@')
                        url, subfolder = split[0], split[1]
                        dest = THIS_DIR / "home" / Path(os.path.expanduser(path))
                        handle_extract(url, subfolder, dest)

    # HOME FILES
    for package_name, files in config['files'].items():
        for f in files.split(', '):
            src = THIS_DIR / "home" / Path(f)
            dest = Path.home() / Path(f".{f}")
            if action == 'rm':
                remove_link(dest)
            else:
                packages = package_name.split('|')
                if any([shutil.which(p) for p in packages]):
                    make_link(src, dest)
                else:
                    remove_link(dest)

    # SYSTEMD USER
    for package_name, units in config['systemd.user'].items():
        for unit in units.split(', '):
            if action == 'rm':
                handle_systemd_user(unit, should_be_enabled=False)
            else:
                handle_systemd_user(unit, should_be_enabled=True)

    # FIREFOX
    if action == 'link':
        handle_firefox("home/firefox.css", "home/firefox.js")
    elif action == 'rm':
        handle_firefox("home/firefox.css", "home/firefox.css", remove=True)


if __name__ == "__main__":
    main()
