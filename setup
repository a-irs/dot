#!/usr/bin/env python3

import os
from pathlib import Path
import shutil
import sys
import glob
import json

THIS_DIR = Path(os.path.dirname(os.path.abspath(__file__)))
CONFIG = json.loads(open(THIS_DIR / "setup.json").read())

def log(level: str, msg: str) -> None:
    msg = msg.replace(str(Path.home()), '~')
    print(f"{level.upper()}: {msg}")


def handle_firefox(path, remove=False) -> None:
    for profile in glob.glob(str(Path.home() / ".mozilla" / "firefox") + "/*.default"):
        if remove:
            remove_link(Path(profile) / "chrome" / "userChrome.css")
        else:
            make_link(
                Path(THIS_DIR) / path,
                Path(profile) / "chrome" / "userChrome.css"
            )


def handle_module(name: str, version: str, path: Path, prefix="https://github.com"):
    group_name = os.path.basename(os.path.dirname(name))
    repo_name = os.path.basename(name)
    target = Path(THIS_DIR / f"cache/modules/{group_name}/{repo_name}")

    # TODO: improve
    os.system(f'git clone --single-branch "{prefix}/{name}" "{target}" 2>&1 | grep -Ev "already exists"')
    os.system(f'git -C "{target}" checkout "{version}" 2>&1 | grep -Ev "(Already on|is up to date|HEAD is now)"')

    make_link(target, path)


def make_link(src: Path, dest: Path) -> None:
    if not src.exists():
        log("error", f"link target does not exist: {src}")
        return

    if dest.is_symlink():
        rel_src = os.path.relpath(src, dest.parent)
        # symlink -> repoint symlink if different
        if dest.resolve() != src:
            old_src = dest.resolve()
            dest.unlink()
            dest.symlink_to(rel_src)
            log("info", f"change {old_src} -> {rel_src}")
    elif dest.exists():
        log("error", f"{dest} exists and is not a symlink")
    else:
        dest.parent.mkdir(parents=True, exist_ok=True)
        dest.symlink_to(os.path.relpath(src, dest.parent))
        log("info", f"link {dest} -> {src}")


def remove_link(link: Path) -> None:
    if link.is_symlink():
        link.unlink()
        log("info", f"remove link {link}")

        for p in link.parents:
            try:
                p.rmdir()
            except OSError:
                break
            log("info", f"remove dir {p}")
    elif link.exists():
        log(f"error", f"{link} is not a symlink!")


def main() -> None:
    action = 'link'
    if len(sys.argv) > 1 and sys.argv[1] == 'rm':
        action = 'rm'

    # HOME FILES
    for package_name, files in CONFIG['files'].items():
        for f in files:
            src = THIS_DIR / "home" / Path(f)
            dest = Path.home() / Path(f".{f}")
            if action == 'rm':
                remove_link(dest)
            else:
                if shutil.which(package_name):
                    make_link(src, dest)
                else:
                    remove_link(dest)

    # MODULES
    for package_name, modules in CONFIG['modules'].items():
        for key, path in modules.items():
            if shutil.which(package_name):
                if action == 'link':
                    url = key.split(':')[0]
                    version = key.split(':')[-1]
                    dest = THIS_DIR / "home" / Path(os.path.expanduser(path))
                    handle_module(url, version, dest)

    # FIREFOX
    if action == 'link':
        handle_firefox("home/firefox.css")
    elif action == 'rm':
        handle_firefox("home/firefox.css", remove=True)


if __name__ == "__main__":
    main()
