#!/usr/bin/env python3

# dependencies: pandoc texlive-core
#   for xelatex + custom fonts: texlive-latexextra
# https://pandoc.org/MANUAL.html

import sys
import subprocess
import shlex
import os
import urllib.request

from typing import Dict


def fetch(url: str, name: str) -> str:
    local_dir = os.path.expanduser("~/.local/share")
    file = f"{local_dir}/{name}"

    if not os.path.isfile(file):
        urllib.request.urlretrieve(url, file)
        print(f"downloaded {file}")
    return file


CONFIG_BASE: Dict[str, list] = {
    'all': [
        '--standalone',
        '--self-contained',
    ],
    '.html': [
        '--mathml',  # best for maths in html
        # see https://gist.github.com/killercup/5917178
        '--css {}'.format(fetch("https://git.io/fpdGP", "pandoc.css"))
    ],
    '.pdf': [
        '-V papersize=a4',
        # Word 2003 style, see https://en.wikipedia.org/wiki/Margin_(typography)
        '-V geometry=top=1in,bottom=1in,left=1.25in,right=1.25in',
        '--pdf-engine=pdflatex',  # or: xelatex
        '-V linestretch=1.12',
        '-V fontfamily=lmodern',  # or: mathpazo
        '-V colorlinks',
        '-V links-as-notes',
        '-V lang=de',
        '-V header-includes="\\usepackage{csquotes}"',  # localized quotation marks
    ]
}
CONFIGS: Dict[str, Dict[str, list]] = {
    'base': {
    },
    'long': {
        'all': [
            '--number-sections',
            '--toc'
        ],
        '.pdf': [
            '-V documentclass=report'
        ]
    },
    'charter': {
        '.pdf': [
            # https://de.overleaf.com/learn/latex/Font_typefaces
            '-V fontfamily=charter',
            '-V linestretch=1.2',
            '-V fontsize=11pt',  # default: 10pt
        ]
    },
    'a5': {
        '.pdf': [
            '-V papersize=a5',
            # FIXME: not overwriting value set in BASE
            # because of "\usepackage[$for(geometry)$$geometry$$sep$,$endfor$]{geometry}" in template
            '-V geometry=top=0.5in,bottom=0.5in,left=0.625in,right=0.625in',
        ]
    }
}


def get_style(name: str, dest_format: str) -> str:
    style_inherit = CONFIG_BASE.get(dest_format, []) + CONFIG_BASE.get('all', [])
    style_all = CONFIGS[name].get('all', [])
    style_ext = CONFIGS[name].get(dest_format, [])

    return ' '.join(style_inherit + style_all + style_ext)


if len(sys.argv) < 4:
    print(f"usage: pan <input> <output> <{'|'.join(CONFIGS)}> [additional pandoc args]")
    sys.exit(1)

source = sys.argv[1]
dest = sys.argv[2]
dest_format = os.path.splitext(dest)[1]

style = get_style(sys.argv[3], dest_format)
additional_args = ' '.join(sys.argv[4:])


cmd = f"pandoc --quiet -i '{source}' -o '{dest}' {style} {additional_args}"
proc = subprocess.Popen(shlex.split(cmd))
proc.communicate()
