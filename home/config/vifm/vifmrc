if $EDITOR != ''
    let &vicmd = $EDITOR
elseif executable('nvim')
    set vicmd=nvim
elseif executable('vim')
    set vicmd=vim
endif

" set miller view (multi column dirs)
set milleroptions=csize:1,rsize:1,rpreview:all
set millerview

" start in single-pane mode
:only

" disable line wrapping initially
set nowrap

" do not automatically follow links
set nofollowlinks

" This makes vifm perform file operations on its own instead of relying on standard utilities like `cp` -> faster
set syscalls

" removed 't' to make C-i/C-o behave as expected
set cpoptions=fs

" What should be saved automatically on restarting vifm.
set vifminfo=dhistory,chistory,shistory,phistory,fhistory,dirstack,registers,bookmarks,bmarks

" This is how many directories to store in the directory history.
set history=500

" hide '../' dir
set dotdirs=

" Natural sort of (version) numbers within text.
set sortnumbers

" disable dd confirmation
set confirm-=delete

" Maximum number of changes that can be undone.
set undolevels=500

" Use Vim's format of help file (has highlighting and "hyperlinks").
" If you would rather use a plain text help file set novimhelp.
set vimhelp

" Format for displaying time in file list. For example:
" TIME_STAMP_FORMAT=%m/%d-%H:%M
" See man date or man strftime for details.
set timefmt='%Y-%m-%d %H:%M'

" Show list of matches on tab completion in command-line mode
set wildmenu

" Display completions in a form of popup with descriptions of the matches
set wildstyle=popup

" activate mouse support
set mouse=a

" Display suggestions in normal, visual and view modes for keys, marks and registers (at most 5 files).  In other view, when available.
set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it contains at least one uppercase letter
set ignorecase
set smartcase
set sort=+iname

" perform copy-on-write when filesystem supports it
set iooptions=fastfilecloning

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists
set scrolloff=5

" List of color schemes to try (picks the first one supported by the terminal)
colorscheme custom Default-256 Default

" ------------------------------------------------------------------------------
" Bookmarks -- goto with 'x
" ------------------------------------------------------------------------------

mark h ~/
mark t ~/tmp
mark T /tmp

autocmd DirEnter ~/downloads setlocal sort=-mtime

" ------------------------------------------------------------------------------
" Commands
" ------------------------------------------------------------------------------

" :com[mand][!] command_name action
"
" These are some of the macros that can be used in the action part:
"  %a for user arguments
"  %c for current file under the cursor
"  %C for current file under the cursor of inactive pane
"  %f for selected file(s)
"  %F for selected file(s) of inactive pane
"  %b is the same as %f %F
"  %d for current directory name
"  %D for current directory name of inactive pane
"  %r{x} for list of files in register {x}
"  %m runs the command in a menu window
"  %u uses command's output to build a file list
"  see `:help vifm-macros` and `:help vifm-filename-modifiers` for more

command! df  df -h %d 2> /dev/null  %m
command! diff  nvim -d %f %F
command! zip  zip -r %c.zip %f
command! run  !! ./%f
command! make  !!make %a
command! take  :mkdir! %a | cd %a

" ------------------------------------------------------------------------------
" File types association
" ------------------------------------------------------------------------------

" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
"
" The first entry is the default program to be used with a matching file.
" The other programs for the file type can be accessed via :file command.
" The command macros like %f, %F, %d, %D may be used in the commands.
" The %a macro is ignored.  To use a % you must put %%.
" Spaces in an app name must be escaped, for example: QuickTime\ Player.app

" For automated FUSE mounts, you must register an extension with :file[x]type
" in one of the following formats:
"
" :filetype patterns FUSE_MOUNT|mount_cmd %SOURCE_FILE %DESTINATION_DIR
"
" %SOURCE_FILE and %DESTINATION_DIR are filled in at runtime.
"
" Example:
"   :filetype *.zip,*.[jwe]ar FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
"
" :filetype patterns FUSE_MOUNT2|mount_cmd %PARAM %DESTINATION_DIR
"
" %PARAM and %DESTINATION_DIR are filled in at runtime.
"
" Example:
"   :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
"
" %PARAM value is the first line of the matched file, example: root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE
" program.  There is also %FOREGROUND, which is useful for entering passwords.

" file preview
fileviewer *,.* s %c

" do not launch e.g. .exe/.efi files
filetype <application/*executable> echo "not launching automatically" %m
" file open - text inside editor, rest with xdg-open
filetype <text/*>,<application/*json*> nvim
if $LC_TERMINAL == "iTerm2"
    filetype *,.* open 2>&1 &
else
    filetype *,.* xdg-open 2>&1 &
endif

" Web
filextype {*.xhtml,*.html,*.htm},<text/html>
        \ {Open with qutebrowser}
        \ qutebrowser %f %i,
        \ {Open with firefox}
        \ firefox %f &,
filetype {*.xhtml,*.html,*.htm},<text/html> links, lynx

" Man page
filetype {*.[1-8]},<text/troff> man ./%c
fileviewer {*.[1-8]},<text/troff> man ./%c | col -b

" FuseZipMount
filetype {*.zip,*.jar,*.war,*.ear,*.oxt,*.apkg},
        \<application/zip,application/java-archive>
       \ {Mount with fuse-zip}
       \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
       \ {View contents}
       \ unzip -l %f | less,
       \ {Extract here}
       \ unzip %c,
fileviewer *.zip,*.jar,*.war,*.ear,*.oxt unzip -l %f

" ArchiveMount
filetype {*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz,*.tar.zst,
         \*.tzst},
        \<application/x-tar>
       \ {Mount with archivemount}
       \ FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.tgz,*.tar.gz tar -tzf %c
fileviewer *.tar.bz2,*.tbz2 tar -tjf %c
fileviewer *.tar.xz,*.txz tar -tJf %c
fileviewer *.tar.zst,*.tzst tar -t --zstd -f %c
fileviewer {*.tar},<application/x-tar> tar -tf %c

" Rar2FsMount and rar archives
filetype {*.rar},<application/x-rar>
       \ {Mount with rar2fs}
       \ FUSE_MOUNT|rar2fs %SOURCE_FILE %DESTINATION_DIR,
fileviewer {*.rar},<application/x-rar> unrar v %c

" IsoMount
filetype {*.iso},<application/x-iso9660-image>
       \ {Mount with fuseiso}
       \ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,

" SshMount
filetype *.ssh
       \ {Mount with sshfs}
       \ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR %FOREGROUND,

" FtpMount
filetype *.ftp
       \ {Mount with curlftpfs}
       \ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %FOREGROUND,

" Fuse7z and 7z archives
filetype {*.7z},<application/x-7z-compressed>
       \ {Mount with fuse-7z}
       \ FUSE_MOUNT|fuse-7z %SOURCE_FILE %DESTINATION_DIR,
fileviewer {*.7z},<application/x-7z-compressed> 7z l %c

" Office files
filextype {*.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx,*.ppt},
         \<application/vnd.openxmlformats-officedocument.*,
          \application/msword,
          \application/vnd.ms-excel>
        \ libreoffice %f &
fileviewer {*.doc},<application/msword> catdoc %c
fileviewer {*.docx},
          \<application/
           \vnd.openxmlformats-officedocument.wordprocessingml.document>
         \ docx2txt.pl %f -

" Syntax highlighting in preview
"
" Explicitly set highlight type for some extensions
"
" 256-color terminal
" fileviewer *.[ch],*.[ch]pp highlight -O xterm256 -s dante --syntax c %c
" fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
"
" 16-color terminal
" fileviewer *.c,*.h highlight -O ansi -s dante %c
"
" Or leave it for automatic detection
" fileviewer *[^/] pygmentize -O style=monokai -f console256 -g

" Displaying pictures in terminal
" fileviewer *.jpg,*.png shellpic %c

" ------------------------------------------------------------------------------
" keyboard mappings
" ------------------------------------------------------------------------------

nnoremap <space> <nop>

" Start shell in current directory
nnoremap <space>s :!alacritty &<cr>

nnoremap <space>t :tree!<cr>

set findprg='fd --color=never %p %s %u'
nnoremap <space>ff :find<space>
nnoremap <space>fF :find --hidden --no-ignore --no-ignore-vcs<space>

set grepprg='rg --vimgrep %i %a %s %u'
nnoremap <space>fg :grep<space>
nnoremap <space>fG :grep -uuu<space>

nnoremap <space>e :touch<space>
nnoremap <space>m :mkdir!<Space>
nnoremap <space>M :take<Space>

" reload config
nnoremap <space>r :restart full | echo 'config reloaded'<cr>

" Display sorting dialog
nnoremap s :sort<cr>

" quit easily
nnoremap q :q<cr>

" toggle hidden
nnoremap <space>. za

" toggle view mode
qnoremap e q

" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv

" Yank current directory path / file path / file name into the clipboard
nnoremap yd :!echo -n %d | xclip -selection clipboard %i<cr>
nnoremap yf :!echo -n %c:p | xclip -selection clipboard %i<cr>
nnoremap yF :!echo -n %c | xclip -selection clipboard %i<cr>

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw

nnoremap o :file<cr>

" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap <space>c :write | edit $MYVIFMRC | restart full<cr>

" Toggle wrap setting
nnoremap <space>w :set wrap!<cr>

" ------------------------------------------------------------------------------
" Various customization examples
" ------------------------------------------------------------------------------

" Use ag (the silver searcher) instead of grep
" set grepprg='ag --line-numbers %i %a %s'

" Set custom status line look
set statusline=" %t%= %8s %8u:%-7g %o:%A  %16d "

set viewcolumns=-{name}..,6{}...

" show side borders, show unicode, vary width of vertical middle
set tuioptions=suv
set fillchars=vborder:│
