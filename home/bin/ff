#!/usr/bin/env python3

from dataclasses import dataclass
from pathlib import Path
import itertools
import json
import subprocess
import sys
import typing
import base64


OUT_FILE = Path.home() / ".oo"
OUT_FILE_2 = Path.home() / ".oo-output"

class Color(object):
    RESET = '\033[' + str(0) + 'm'
    BOLD = '\033[' + str(1) + 'm'
    DIM = '\033[' + str(2) + 'm'
    MAGENTA = '\033[' + str(35) + 'm'
    CYAN = '\033[' + str(36) + 'm'
    BLUE = '\033[' + str(34) + 'm'
    GREEN = '\033[' + str(32) + 'm'
    YELLOW = '\033[' + str(33) + 'm'
    RED = '\033[' + str(31) + 'm'
    WHITE = '\033[' + str(37) + 'm'
    BLACK = '\033[' + str(30) + 'm'


def run_rg(args: "list[str]") -> subprocess.CompletedProcess:
    base_args = ["rg", "--case-sensitive", "--with-filename", "--line-number", "--heading", "--json", "--sort=path"]
    return subprocess.run(base_args + args, capture_output=True, text=True)


def truncate(s: str, limit=1000) -> str:
    if len(s) > limit:
        s = s[0:limit] + Color.MAGENTA + " ... [truncated]" + Color.RESET
    return s

def out(s: str, fd: typing.IO) -> None:
    for x in [sys.stdout, fd]:
        x.write("{}\n".format(s))

@dataclass
class SearchMatch:
    line_nr: int
    text: str
    hint: str
    file_name: str
    is_context: bool = False

    def as_text(self, lineno_width) -> str:
        if self.is_context:
            # context match - do not show "i"
            return "{} {}{}{} {} {}{}{}".format(
                " " * len(str(self.hint)),
                Color.DIM,
                str(self.line_nr).ljust(lineno_width),
                Color.RESET,
                self.text.rstrip(),
                Color.DIM,
                self.file_name,
                Color.RESET,
            )
        else:
            return "{}{}{} {}{}{} {}  {}{}{}".format(
                Color.YELLOW,
                self.hint,
                Color.RESET,
                Color.DIM,
                str(self.line_nr).ljust(lineno_width),
                Color.RESET,
                self.text.rstrip(),
                Color.DIM,
                self.file_name,
                Color.RESET,
            )

def main() -> None:

    # without command line arguments: print result of last run
    if len(sys.argv) <= 1:
        with open(OUT_FILE_2, "r") as fd:
            print(fd.read().rstrip())
        sys.exit()


    process = run_rg(sys.argv[1:])
    lines = [l for l in process.stdout.split("\n") if l]

    if lines:
        # empty out the file
        open(OUT_FILE, "w").close()
        open(OUT_FILE_2, "w").close()

    matches = []
    line_width = 0

    i = 0
    alphabet = "dfghjertzuicvbasklqwopyxnm"
    hints_i = 1
    hints = list(itertools.product(alphabet, repeat=1))

    with open(OUT_FILE_2, "a") as log:
        for line in lines:

            # if we can't get a character from the hints list, increase the hints list
            if len(hints) <= i:
                hints_i += 1
                hints += list(itertools.product(alphabet, repeat=hints_i))

            try:
                j = json.loads(line)
            # if output is not a valid json (e.g. an error message), just print it
            except json.decoder.JSONDecodeError:
                print(line)
                continue

            if j.get("type") == "begin":
                if i != 0:
                    out("", log)
                s = "{}{}{}".format(Color.BOLD + Color.BLUE, j["data"]["path"]["text"], Color.RESET)
                out(s, log)

                # reset state values
                matches = []
                line_width = 0

            elif j.get("type") == "match":
                d = j["data"]
                if "text" in d["lines"]:
                    text = d["lines"]["text"]

                    # replace going back to front (so start/end positions do not change while inserting ANSI codes)
                    for submatch in sorted(d["submatches"], key=lambda d: d["end"], reverse=True):
                        text = "{}{}{}{}{}".format(
                                text[0:submatch["start"]],
                                Color.GREEN,
                                submatch["match"]["text"],
                                Color.RESET,
                                text[submatch["end"]:]
                        )
                else:
                    text = str(base64.b64decode(d["lines"]["bytes"]))
                line_width = max(len(str(d["line_number"])), line_width)

                matches.append(SearchMatch(
                    hint="".join(hints[i]),
                    line_nr=d["line_number"],
                    text=truncate(text),
                    file_name=d["path"]["text"]
                ))
                i += 1

            elif j.get("type") == "context":
                if "text" in j["data"]["lines"]:
                    text = j["data"]["lines"]["text"]
                else:
                    text = str(base64.b64decode(j["data"]["lines"]["bytes"]))

                matches.append(SearchMatch(
                    hint="".join(hints[i]),
                    line_nr=j["data"]["line_number"],
                    text=truncate(text),
                    file_name=j["data"]["path"]["text"],
                    is_context=True,
                ))

            elif j.get("type") == "end":
                with open(OUT_FILE, "a") as fd:
                    for m in matches:
                        if not m.is_context:
                            fd.write("{}:{}:{}\n".format(
                                m.hint, m.line_nr, Path(m.file_name).absolute()
                            ))
                        out(m.as_text(line_width), log)


    if process.stderr:
        print()
        print("{}{}{}".format(
            Color.RED,
            process.stderr,
            Color.RESET
        ))

    sys.exit(process.returncode)


if __name__ == "__main__":
    main()
