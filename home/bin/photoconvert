#!/usr/bin/env python3

import sys
from pathlib import Path
import subprocess
import typing

# TODO:
# delete files that have no source any more

DIR_IN = Path(sys.argv[1])
DIR_OUT = Path(sys.argv[2])
TYPES = {
    "photo": [".jpg", ".jpeg", ".psd", ".tif", ".tiff"],
    "video": [".mp4", ".avi"]
}


def run(command: str) -> subprocess.CompletedProcess:
    return subprocess.run(command, check=True, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)


def prepare(input_dir: Path, input_file: Path, output_base_dir: Path, extension: str) -> Path:
    original_extension = input_file.suffix
    if original_extension != extension:
        extension = original_extension.lower() + extension

    # recreate directory structure
    structure = Path(str(input_file).replace(str(input_dir) + "/", "", 1)).parent
    output_dir = output_base_dir / structure

    output_file = output_dir / Path(input_file.name).with_suffix(extension)
    output_file.parent.mkdir(parents=True, exist_ok=True)

    return output_file


def handle_photo(input_dir: Path, input_file: Path, output_base_dir: Path, size: int, quality: int) -> typing.Optional[Path]:
    output_file = prepare(input_dir, input_file, output_base_dir, ".jpg")

    # skip if already existing
    if output_file.is_file() and output_file.stat().st_size > 0:
        return None

    # do business
    command = f'convert "{input_file}" -flatten -auto-orient -quality {quality} -resize {size}x{size}\\> "{output_file}"'
    command2 = f'exiftool -overwrite_original -all= -ifd1:all= -previewimage= -thumbnailimage= "{output_file}"'
    run(command)
    run(command2)

    return output_file


def handle_video(input_dir: Path, input_file: Path, output_base_dir: Path, size: int, quality: int) -> typing.Optional[Path]:
    output_file = prepare(input_dir, input_file, output_base_dir, ".mp4")

    # skip if already existing
    if output_file.is_file() and output_file.stat().st_size > 0:
        return None

    # -y overwrite, -nostdin to not cause weird issues https://www.igorkromin.net/index.php/2016/12/23/prevent-errors-during-ffmpeg-execution-in-a-loop/
    command = f"""
      ffmpeg -nostdin -y
        -i "{input_file}"
        -c:v libx264 -preset medium -crf "{quality}" -tune film
        -filter:v scale="{size}":-1
        -profile:v high -level 4.0
        -pix_fmt yuv420p
        -c:a aac -b:a 128k
        -movflags +write_colr
        "{output_file}"
    """
    exec = ' '.join([l.strip() for l in command.splitlines() if l])
    run(exec)

    return output_file


def find(dir: Path, extensions: typing.List[str]) -> typing.List[Path]:
    files: typing.List[Path] = []
    for glob_result in [Path(dir).glob('*/*/*/*{}'.format(ext)) for ext in extensions]:
        files.extend(glob_result)
    for glob_result in [Path(dir).glob('*/*/*/*{}'.format(ext.upper())) for ext in extensions]:
        files.extend(glob_result)
    return files


def main() -> None:
    photo_files = find(DIR_IN, TYPES["photo"])
    photo_files_total = len(photo_files)
    for i, f in enumerate(photo_files):
        print("{}/{} ({}%) - {}".format(i + 1, photo_files_total, int((i + 1) / photo_files_total * 100), f))
        for output in [
            handle_photo(DIR_IN, f, DIR_OUT / "1280", 1280, 60),
            handle_photo(DIR_IN, f, DIR_OUT / "2560", 2560, 70)
        ]:
            if output:
                print(output)
        print()

    video_files = find(DIR_IN, TYPES["video"])
    video_files_total = len(video_files)
    for i, f in enumerate(video_files):
        print("{}/{} ({}%) - {}".format(i + 1, video_files_total, int((i + 1) / video_files_total * 100), f))
        for output in [
            handle_video(DIR_IN, f, DIR_OUT / "1280", 854, 25),
            handle_video(DIR_IN, f, DIR_OUT / "2560", 1280, 25)
        ]:
            if output:
                print(output)
        print()


if __name__ == "__main__":
    main()
