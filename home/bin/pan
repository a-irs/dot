#!/usr/bin/env python3

# dependencies: pandoc texlive-core
#   for xelatex + custom fonts: texlive-latexextra
# https://pandoc.org/MANUAL.html

import sys
import subprocess
import shlex
import os
import urllib.request

from typing import List

SCRIPT_DIR = os.path.dirname(os.path.realpath(sys.argv[0]))


CONFIG = {
    'base': {
        'all': ['--standalone'],
        '.html': [
            '--mathml',  # best for maths in html
        ],
        '.pdf': [
            '-V papersize=a4',
            # Word 2003 style, see https://en.wikipedia.org/wiki/Margin_(typography)
            '-V geometry=top=1in,bottom=1in,left=1.25in,right=1.25in',
            '--pdf-engine=pdflatex',  # or: xelatex
            '-V linestretch=1.12',
            '-V fontfamily=lmodern',
            '-V colorlinks',
            '-V links-as-notes',
            '-V lang=de',
            '-V header-includes="\\usepackage{csquotes}"',  # localized quotation marks
        ]
    },

    'html-sans': {
        'inherit': ['base'],
        '.html': [
            '--self-contained',
            '--css {}/{}'.format(SCRIPT_DIR, "pan.css"),
        ],
    },

    'long': {
        'inherit': ['base'],
        'all': ['--number-sections', '--toc'],
        '.pdf': ['-V documentclass=report']
    },

    'tech': {
        'inherit': ['long'],
        'all': ['-V lang=en'],
        '.html': [
            '--css {}'.format("style.css"),
        ],
        '.pdf': [
            '-V fontfamily=charter',
            '-V linestretch=1.2',
            '-V fontsize=11pt',
        ]
    },

    'charter': {
        'inherit': ['base'],
        '.pdf': [
            # https://de.overleaf.com/learn/latex/Font_typefaces
            '-V fontfamily=charter',
            '-V linestretch=1.2',
            '-V fontsize=11pt',  # default: 10pt
        ]
    },
}


def get_style(name: str, dest_format: str) -> List[str]:
    params: List[str] = []

    for e in CONFIG[name].get('inherit', []):
        params += get_style(e, dest_format)
    params += CONFIG[name].get('all', [])
    params += CONFIG[name].get(dest_format, [])

    return params


def fetch(url: str, name: str) -> str:
    local_dir = os.path.expanduser("~/.local/share")
    file = "{}/{}".format(local_dir, name)

    if not os.path.isfile(file):
        urllib.request.urlretrieve(url, file)
        print("downloaded {}".format(file))
    return file


def main():
    if len(sys.argv) < 4:
        print("usage: pan <input> <output> <{}> [additional pandoc args]".format('|'.join(CONFIG)))
        sys.exit(1)

    source = sys.argv[1]
    dest = sys.argv[2]
    dest_format = os.path.splitext(dest)[1]

    style = ' '.join(get_style(sys.argv[3], dest_format))
    additional_args = ' '.join(sys.argv[4:])

    cmd = "pandoc -i '{}' -o '{}' --lua-filter=always-compact-list.lua {} {}".format(source, dest, style, additional_args)
    print(cmd)
    proc = subprocess.Popen(shlex.split(cmd))
    proc.communicate()


if __name__ == "__main__":
    main()
