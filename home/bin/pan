#!/usr/bin/env python3

# dependencies: pandoc texlive-core
#   for xelatex + custom fonts: texlive-latexextra
# https://pandoc.org/MANUAL.html

import sys
import subprocess
import shlex
import os
import urllib.request

from typing import List

# FIXME: how to automatically use these extensions when using markdown:?
# '-f markdown+autolink_bare_uris',  # autolink URLs
# '-f markdown+emoji',

CONFIG = {
    'base': {
        'all': [
            '--standalone',  # do not produce a document fragment, but whole document (e.g. wrapped with <html></html>)
            '--lua-filter=always-compact-list.lua',  # always convert lists to compact lists
            '--lua-filter=promote-headers.lua',  # use first header as title
            '-V lang=en',
        ],
        '.html': [
            '--mathml',  # best for maths in html, only for firefox+safari
            # '--mathjax',  # 2nd best alternative, more compatible but embeds huge JS (800KB) when used with --self-contained
        ],
        '.pdf': [
            '-V header-includes="\\usepackage{csquotes}"',  # localized quotation marks
            '--pdf-engine=pdflatex',  # or: xelatex
            '-V colorlinks',
            '-V links-as-notes',

            '-V papersize=a4',
            '-V geometry=top=1in,bottom=1in,left=1in,right=1in',  # Word 2007 style, see https://en.wikipedia.org/wiki/Margin_(typography)
            '-V linestretch=1.25',
            '-V fontsize=11pt',  # default: 10
        ]
    },

    'sans': {
        'inherit': ['base'],
        '.html': [
            '--self-contained',
            '--css {}'.format("sans.css"),
        ],
        '.pdf': [
            '-V fontfamily=utopia',  # good fonts: charter (sans), utopia (sans), palatino (serif)
        ]
    },

    'sans-long': {
        'inherit': ['sans'],
        'all': [
            '--number-sections',
            '--toc',
        ],
        '.pdf': [
            '-V documentclass=report'
        ]
    },
}


def get_style(name: str, dest_format: str) -> List[str]:
    params: List[str] = []

    for e in CONFIG[name].get('inherit', []):
        params += get_style(e, dest_format)
    params += CONFIG[name].get('all', [])
    params += CONFIG[name].get(dest_format, [])

    return params


def fetch(url: str, name: str) -> str:
    local_dir = os.path.expanduser("~/.local/share")
    file = "{}/{}".format(local_dir, name)

    if not os.path.isfile(file):
        urllib.request.urlretrieve(url, file)
        print("downloaded {}".format(file))
    return file


def main():
    if len(sys.argv) < 4:
        print("usage: pan <input> <output> <{}> [additional pandoc args]".format('|'.join(CONFIG)))
        sys.exit(1)

    source = sys.argv[1]
    dest = sys.argv[2]
    dest_format = os.path.splitext(dest)[1]

    style = ' '.join(get_style(sys.argv[3], dest_format))
    additional_args = ' '.join(sys.argv[4:])

    resource_path = ".:{}".format(os.path.expanduser("~/.local/share/pandoc"))
    cmd = "pandoc -i '{}' -o '{}' --resource-path={} {} {}".format(source, dest, resource_path, style, additional_args)
    proc = subprocess.Popen(shlex.split(cmd))
    proc.communicate()

    sys.exit(proc.returncode)


if __name__ == "__main__":
    main()
