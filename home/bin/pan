#!/usr/bin/env python3

# dependencies: pandoc texlive-core
#   for xelatex + custom fonts: texlive-latexextra
#   beamer template: texlive-pictures, texlive-fontsextra
#
# https://pandoc.org/MANUAL.html
#
# TODO:
# - multiple preprocess
# - process multiple files at once

import tempfile
import sys
import subprocess
import shlex
import os
import argparse
import logging

from typing import List

# FIXME: how to automatically use these extensions when using markdown as input?
# '-f markdown+autolink_bare_uris',  # autolink URLs
# lists_without_preceding_blankline
# '-f markdown+emoji',

PREPROCESS = [
    # replace "!include:<filename>" with content of file
    # much simpler than lua/python/haskell filter
    ["perl", "-ne", "s/^\\!include:(.+).*$/`cat $1`/e;print"],

    # replace arrows with latex arrows
    ["perl", "-pe", r"s/([\(\)]?|\s)-> /\1\$\\rightarrow\$ /g"],
    ["perl", "-pe", r"s/([\(\)]?|\s)--> /\1\$\\longrightarrow\$ /g"],

    # needed for pdflatex: sanitize non-latex-compatible stuff, e.g. in systemctl output
    ["perl", "-pe", r"s/—/-/g"],
    ["perl", "-pe", r"s/→/->/g"],
    ["perl", "-pe", r"s/│/|/g"],
]

CONFIG_DEFAULT = 'sans-short'
CONFIG_DEFAULT_OUTPUT = '.html'

CONFIG = {
    '_base': {
        'all': [
            '--standalone',  # do not produce a document fragment, but whole document (e.g. wrapped with <html></html>)
            '--filter pandoc-crossref', '--citeproc',
            '--lua-filter=always-compact-list.lua',  # always convert lists to compact lists
            '-V lang=en',
        ],
        '.html': [
            '--mathml',  # best for maths in html, only for firefox+safari
            # '--mathjax',  # 2nd best alternative, more compatible but embeds huge JS (800KB) when used with --embed-resources
        ],
        '.pdf': [
            '-V header-includes="\\usepackage{csquotes}"',  # localized quotation marks
            '--pdf-engine=pdflatex',  # pdflatex (faster, worse utf8 support for listings, bigger filesizes) - or xelatex
            '-V colorlinks',
            '-V links-as-notes',

            '-V papersize=a4',
            '-V geometry=top=3cm,bottom=3cm,left=2.5cm,right=2.5cm',  # tweaked Word 2007 style (2.5cm on any side)

            # better than builtin "-V linestretch", because it also affects TOC
            r'-V header-includes="\usepackage{setspace}\setstretch{1.25}"',

            # better code blocks (e.g. with line wrapping)
            # http://texdoc.net/texmf-dist/doc/latex/listings/listings.pdf
            '--listings',
            '-V listings=true',  # make pandoc-crossref compatible with listings
            r'-V header-includes="\lstset{breaklines=true}"',
            r'-V header-includes="\lstset{columns=fullflexible}"',
            r'-V header-includes="\lstset{keepspaces=true}"',
            r'-V header-includes="\lstset{extendedchars=true}"',
            r'-V header-includes="\lstset{showstringspaces=false}"',
            r'-V header-includes="\lstset{basicstyle=\small\ttfamily}"',
            r'-V header-includes="\lstset{keywordstyle=\color{Maroon}}"',
            r'-V header-includes="\lstset{stringstyle=\color{PineGreen}}"',
            r'-V header-includes="\lstset{commentstyle=\slshape\color{Blue}}"',
            r'-V header-includes="\lstset{numberstyle=\color{Green}}"',

            # postbreak arrow for code listings
            r'-V header-includes="\newsavebox\mypostbreak"',
            r'-V header-includes="\savebox\mypostbreak{\raisebox{0ex}[0ex][0ex]{\ensuremath{\color{Gray}\hookrightarrow\space}}}"',
            r'-V header-includes="\lstset{breaklines=true,postbreak=\usebox\mypostbreak}"',
        ]
    },

    'sans': {
        'inherit': ['_base'],
        '.html': [
            '--embed-resources',
            '--css {}'.format("sans.css"),
        ],
        '.pdf': [
            # see e.g. https://icl.utk.edu/~mgates3/docs/latex-fonts.pdf
            '-V fontfamily=fourier',  # good fonts: charter (sans), utopia/fourier (sans), palatino (serif)
            '-V fontsize=11pt',  # default: 10
        ]
    },

    'sans-short': {
        'inherit': ['sans'],
        'all': [
            '--lua-filter=promote-headers.lua',  # use first header as title
        ],
    },

    'sans-short-toc': {
        'inherit': ['sans-short'],
        'all': [
            '--toc',
        ],
    },

    '_beamer': {
        'inherit': ['sans'],
        '.pdf': [
            '-t beamer',
            '--slide-level=2',
            '-V aspectratio=32',  # 3:2 ratio
            '-V geometry=top=0cm,bottom=0cm,left=1cm,right=1cm',  # reset _base
        ]
    },

    'beamer-basic': {
        'inherit': ['_beamer'],
        '.pdf': [
            '-t beamer',
            '--slide-level=2',
            '-V fonttheme=professionalfonts',
            '-V navigation=horizontal',
        ]
    },

    'beamer': {
        'inherit': ['_beamer'],
        '.pdf': [
            '-V theme:metropolis',
            '-V themeoptions:progressbar=frametitle,sectionpage=progressbar,subsectionpage=progressbar',
            r'-V header-includes="\usepackage[sfdefault]{AlegreyaSans}"',
            r'-V header-includes="\renewcommand*\oldstylenums[1]{{\AlegreyaSansOsF #1}}"',
        ]
    },

    'sans-long': {
        'inherit': ['sans'],
        'all': [
            '--toc',
        ],
        '.pdf': [
            # make section headers slightly bigger - see https://tex.stackexchange.com/questions/59726/change-size-of-section-subsection-subsubsection-paragraph-and-subparagraph-ti
            r'-V header-includes="\usepackage{titlesec}"',
            r'-V header-includes="\titleformat*{\section}{\LARGE\bfseries}"',
        ],
    },
    'sans-long-numbered': {
        'inherit': ['sans-long'],
        'all': [
            '--number-sections',
        ],
    },
    'sans-very-long': {
        'inherit': ['sans'],
        'all': [
            '--toc',
        ],
        '.pdf': [
            '-V documentclass=report',

            # reduce spacing above chapter - see https://tex.stackexchange.com/questions/63390/how-to-decrease-spacing-before-chapter-title
            r'-V header-includes="\usepackage{titlesec}"',
            r'-V header-includes="\titleformat{\chapter}[display]{\normalfont\huge\bfseries}{\chaptertitlename\ \thechapter}{20pt}{\Huge}"',
            r'-V header-includes="\titlespacing*{\chapter}{0pt}{-40pt}{20pt}"',
        ]
    },
    'sans-very-long-numbered': {
        'inherit': ['sans-very-long'],
        'all': [
            '--number-sections',
        ]
    },
}


def get_style(name: str, dest_format: str) -> List[str]:
    params: List[str] = []

    for e in CONFIG[name].get('inherit', []):
        params += get_style(e, dest_format)
    params += CONFIG[name].get('all', [])
    params += CONFIG[name].get(dest_format, [])

    return params


def preprocess(command: List[str], file: str) -> str:
    cmd = subprocess.run(command + [file], capture_output=True)
    suffix = "_{}".format(os.path.basename(file))

    with tempfile.NamedTemporaryFile(delete=False, suffix=suffix) as temp:
        temp.write(cmd.stdout)
        if cmd.stderr:
            print("stderr from preprocessor: {}".format(cmd.stderr.decode()))
            sys.exit(1)
        temp.write(cmd.stderr)
        temp.flush()

        logging.debug("preprocessed %s in %s", file, temp.name)

        return temp.name


def pandoc(input_file: str, output_file: str, style: str, args: List[str]) -> (int, List[str]):
    output_ext = os.path.splitext(output_file)[1]
    output_style = ' '.join(get_style(style, output_ext))

    cmds = []

    processed_file = input_file
    for preprocess_cmd in PREPROCESS:
        cmds.append(preprocess_cmd)
        processed_file = preprocess(preprocess_cmd, processed_file)

    resource_path = ".:{}".format(os.path.expanduser("~/.local/share/pandoc"))
    cmd = shlex.split(f"pandoc {processed_file} -o {output_file} --resource-path={resource_path} " + output_style) + args

    copy = cmd.copy()
    copy.remove(processed_file)
    cmds.append(copy)

    logging.info(' '.join(cmd))
    logging.debug("command line: %s", cmd)
    proc = subprocess.Popen(cmd)
    proc.communicate()

    # delete temporary files
    if processed_file != input_file:
        os.unlink(processed_file)

    return (proc.returncode, cmds)


def main() -> None:

    # argument parsing
    parser = argparse.ArgumentParser(description="wrapper for pandoc")
    parser.add_argument('input', help="input file")
    parser.add_argument('output', nargs='?', help="output filename or pandoc-supported file type")
    parser.add_argument('style', metavar='style', nargs='?', help=" | ".join(CONFIG), default=CONFIG_DEFAULT, choices=CONFIG.keys())
    parser.add_argument('-v', '--verbose', action='count', default=0, help="set verbose log level")
    parser.add_argument('-l', '--write-build-log', action='store_true', default=False, help="write build commands to <filename>.build.log")
    args, additional_args = parser.parse_known_args()

    if args.verbose == 0:
        logging.basicConfig(format='%(message)s')
        logging.getLogger().setLevel(logging.WARNING)
    if args.verbose == 1:
        logging.basicConfig(format='%(message)s')
        logging.getLogger().setLevel(logging.INFO)
    elif args.verbose > 1:
        logging.basicConfig(format='%(levelname)s %(funcName)s() %(message)s')
        logging.getLogger().setLevel(logging.DEBUG)

    # if no output is given, write to <input_filename>.html
    if not args.output:
        args.output = os.path.splitext(args.input)[0] + CONFIG_DEFAULT_OUTPUT

    # when only ext is chosen, set filename automatically (<input_filename>.<ext>)
    if not os.path.splitext(args.output)[1]:
        args.output = os.path.splitext(args.input)[0] + "." + args.output

    logging.debug("internal arguments: %s", vars(args))
    logging.debug("pandoc arguments: %s", additional_args)

    # pandoc
    rc, build_commands = pandoc(args.input, args.output, args.style, additional_args)

    # write log/sh file so that output is reproducible in the future
    if args.write_build_log:
        with open(args.output + ".log", "w") as fd:
            fd.write("#!/bin/sh\n\ncat {} | \\\n".format(args.input))
            for i, cmd in enumerate(build_commands):
                cmd = shlex.join(cmd).replace(os.path.expanduser("~"), "$HOME")
                if i != len(build_commands) - 1:
                    fd.write(cmd + " | \\\n")
                else:
                    fd.write(cmd)
            fd.write("\n")

    parser.exit(status=rc)


if __name__ == "__main__":
    main()
