#!/usr/bin/env python3

# dependencies: pandoc texlive-core
#   for xelatex + custom fonts: texlive-latexextra
#
# https://pandoc.org/MANUAL.html

import sys
import subprocess
import shlex
import os
import argparse
import logging

from typing import List

# FIXME: how to automatically use these extensions when using markdown as input?
# '-f markdown+autolink_bare_uris',  # autolink URLs
# '-f markdown+emoji',

# replace "!include:<filename>" with content of file
# much simpler than lua/python/haskell filter
PREPROCESS = ["perl", "-ne", "s/^\\!include:(.+).*$/`cat $1`/e;print"]

CONFIG_DEFAULT = 'sans-short'

CONFIG = {
    'base': {
        'all': [
            '--standalone',  # do not produce a document fragment, but whole document (e.g. wrapped with <html></html>)
            '--lua-filter=always-compact-list.lua',  # always convert lists to compact lists
            '-V lang=en',
        ],
        '.html': [
            '--mathml',  # best for maths in html, only for firefox+safari
            # '--mathjax',  # 2nd best alternative, more compatible but embeds huge JS (800KB) when used with --self-contained
        ],
        '.pdf': [
            '-V header-includes="\\usepackage{csquotes}"',  # localized quotation marks
            '--pdf-engine=pdflatex',  # or: xelatex
            '-V colorlinks',
            '-V links-as-notes',

            '-V papersize=a4',
            '-V geometry=top=3cm,bottom=3cm,left=2.5cm,right=2.5cm',  # tweaked Word 2007 style (2.5cm on any side)
            '-V linestretch=1.2',
            '-V fontsize=11pt',  # default: 10
        ]
    },

    'sans': {
        'inherit': ['base'],
        '.html': [
            '--self-contained',
            '--css {}'.format("sans.css"),
        ],
        '.pdf': [
            '-V fontfamily=utopia',  # good fonts: charter (sans), utopia (sans), palatino (serif)
        ]
    },

    'sans-short': {
        'inherit': ['sans'],
        'all': [
            '--lua-filter=promote-headers.lua',  # use first header as title
        ],
    },

    'sans-long': {
        'inherit': ['sans'],
        'all': [
            '--number-sections',
            '--toc',
        ],
        # only for very long
        # '.pdf': [
        #     '-V documentclass=report'
        # ]
    },
}


def get_style(name: str, dest_format: str) -> List[str]:
    params: List[str] = []

    for e in CONFIG[name].get('inherit', []):
        params += get_style(e, dest_format)
    params += CONFIG[name].get('all', [])
    params += CONFIG[name].get(dest_format, [])

    return params


def preprocess(file: str) -> str:
    dest = "processed." + file

    cmd = subprocess.run(PREPROCESS + [file], capture_output=True)

    with open(dest, 'wb') as fw:
        fw.write(cmd.stdout)
        if cmd.stderr:
            print("stderr from preprocessor: {}".format(cmd.stderr.decode()))
            sys.exit(1)
        fw.write(cmd.stderr)
        fw.flush()

    logging.debug("preprocessed %s in %s", file, dest)

    return dest


def pandoc(input_file: str, output_file: str, style: str, args: List[str]) -> int:
    output_ext = os.path.splitext(output_file)[1]
    output_style = ' '.join(get_style(style, output_ext))

    preprocessed_input = preprocess(input_file)

    resource_path = ".:{}".format(os.path.expanduser("~/.local/share/pandoc"))
    cmd = shlex.split(f"pandoc -i {preprocessed_input} -o {output_file} --resource-path={resource_path} " + output_style) + args

    logging.debug("command line: %s", cmd)
    proc = subprocess.Popen(cmd)
    proc.communicate()

    os.unlink(preprocessed_input)
    return proc.returncode


def main() -> None:
    logging.basicConfig(format='%(funcName)s: %(message)s')

    # argument parsing
    parser = argparse.ArgumentParser(description="wrapper for pandoc")
    parser.add_argument('input', help="input file")
    parser.add_argument('output', nargs='?', help="output filename or pandoc-supported file type")
    parser.add_argument('style', metavar='style', nargs='?', help=" | ".join(CONFIG), default=CONFIG_DEFAULT, choices=CONFIG.keys())
    parser.add_argument('-v', '--verbose', action='store_true', default=False)
    args, additional_args = parser.parse_known_args()

    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)

    # by default, write to <filename>.html
    if not args.output:
        args.output = os.path.splitext(args.input)[0] + ".html"

    # when only ext is chosen, set filename automatically (<filename>.<ext>)
    if not os.path.splitext(args.output)[1]:
        args.output = os.path.splitext(args.input)[0] + "." + args.output

    logging.debug("internal arguments: %s", vars(args))
    logging.debug("pandoc arguments: %s", additional_args)

    # pandoc
    rc = pandoc(args.input, args.output, args.style, additional_args)
    parser.exit(status=rc)


if __name__ == "__main__":
    main()
