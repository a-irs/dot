#!/usr/bin/env bash

set -uo pipefail

path=$1
path=${path/#\~/~}  # expand a literal tilde at the beginning

width="${2:-$(tput cols)}"
height="${3:-$(tput lines)}"

filename="${path##*/}"

wrap() { cut -c 1-"$width"; }
trim() { head -n "$height"; }

[[ -e /usr/local/bin/gls ]] && ls() { gls "$@"; }

remove_blank() { sed '/./,$!d'; } # remove blank lines at top of file
remove_double_blank() { cat -s; } # remove multiple blank lines
highlight_dirs() { GREP_COLOR='1;33' grep -E --color=always '(.)*/|$'; } # TODO: not working in ranger
cleanup_openssl() {
    local reset=$(tput sgr0)
    local bold=$(tput bold)
    local blue=$(tput setaf 4)
    local cyan=$(tput setaf 6)
    local red=$(tput setaf 1)
    # `# also show serial number as decimal, not only hex` \
    # | python3 -c 'import re, sys; s = sys.stdin.read(); i = int(re.search(r"Serial Number:.\s+([0-9a-zA-Z:]+)", s, flags=re.S)[1].replace(":", ""), 16); print(re.sub(r"Serial Number:(.\s+)", rf"Serial Number: \1DEC: {i}\1HEX: ", s, flags=re.S))' \
    perl \
    `# truncate long fingerprints` \
        -0pe 's/((\s+)(([a-zA-Z0-9][a-zA-Z0-9]:){15,})\n)+\s*/\n\2\..:/gm;' \
    | perl \
        `# colorize everything with a colon at the end - level 0` \
        -pe "s/(^\S(\w|\s)+:(\s|$))/${bold}${cyan}\1${reset}/g;" \
        `# colorize everything with a colon at the end - level 1` \
        -pe "s/(^\s{4}\w(\w|\s)+:(\s|$))/${bold}${blue}\1${reset}/g;" \
        `# special coloring for X509/OID attributes` \
        -pe "s/(\s+(X509|(\d+\.){4,}).*:)/${cyan}\1${reset}/g;" \
        `# colorize everything with a colon at the end` \
        -pe "s/(^.+:(\s|$))/${blue}\1${reset}/g;" \
        `# fix for missing colon after "Validity"` \
        -pe "s/^(\s+Validity)$/${blue}\1${reset}/g;" \
        `# special coloring for CA attributes` \
        -pe "s/(CA:TRUE|1024 bit|2048 bit|sha1|SHA1)/${red}\1${reset}/g;" \
        `# skip empty lines` \
    | awk NF
}

preview_elf() { readelf -sh --wide "$path" | trim | wrap; }
preview_binary() { zcat "$path" 2> /dev/null || cat "$path" | xxd -autoskip | trim | wrap; }

preview_sqlite() {
    local t
    for t in $(sqlite3 "$path" .tables); do
        sqlite3 "$path" < <(echo -e ".mode json\nSELECT '$t' AS 'TABLE', * FROM $t")
    done | jq --color-output | trim | wrap
}
preview_tar() { tar tf "$path" | trim | highlight_dirs | wrap; }
preview_zip() { zipinfo -2tz "$path" | trim | highlight_dirs | wrap; }
preview_htm() { elinks -dump 1 -dump-color-mode 1 "$path" | remove_blank | remove_double_blank | trim | wrap; }
preview_pdf() { pdftotext -l 10 -nopgbrk -q "$path" - | remove_blank | remove_double_blank | trim | wrap; }
preview_txt() { cat "$path" | remove_blank | remove_double_blank | trim | wrap; }
preview_media() { mediainfo "$path" | remove_blank | remove_double_blank | trim | sed 's/  \+:/ --/;' | wrap; }
preview_json() { jsn "$path" | trim | wrap; }
preview_markdown() { bat --force-colorization --style=snip --no-pager --theme=ansi "$path"; }
preview_sshkey() { file -Lb -- "$path"; ssh-keygen -l -f "$path"; echo ""; cat "$path" | trim; }
preview_plist() { temp=$(mktemp); plutil -convert xml1 -o "$temp" -- "$path"; cat "$temp" | trim | wrap; rm -f "$temp"; }
preview_cert() { openssl x509 -noout -text -in "$path" "$@" | cleanup_openssl | trim | wrap; }
preview_pkcs() { keytool -v -list -keystore "$path" -storepass '' | trim | wrap; }
preview_pkcs_openssl() { openssl pkcs12 -info -in "$path" -nodes -passin pass: | openssl x509 -noout -text | cleanup_openssl | trim | wrap; }
preview_csr() { openssl req -in "$path" -noout -text | cleanup_openssl | trim | wrap; }
preview_crl() { openssl crl -inform PEM -text -noout -in "$path" 2>/dev/null || openssl crl -inform DER -text -noout -in "$path"; }
preview_csv() { column -t -s\;, "$path" | trim | wrap; }
preview_rrd() { rrdinfo "$path" | trim | wrap; }
preview_pkg() { pkgutil -v --payload-files "$path" | grep -vE '^\.$' | sort | trim | wrap; }
preview_pgp() { gpg --keyid-format long --list-options show-keyring "$path" 2>/dev/null; }
preview_pgp_sig() { pgpdump "$path" 2>/dev/null || gpg --list-packets "$path"; }

file_type=$(file -Lb -- "$path")
mime_type=$(file --mime-type -Lb -- "$path")

tput bold; tput setaf 5
len=$(printf '%s' "$file_type ($mime_type)" | wc -c)
printf '%s\n' "$file_type ($mime_type)" | wrap
printf '\n'
tput sgr0

if [[ -d "$path" ]]; then
    ls -lhF --color=always "$path"; exit
fi

case "$file_type" in
    "Certificate, Version=3"*) preview_cert -inform der; exit ;;
    "PGP public "*) preview_pgp; exit ;;
    *" private key") preview_sshkey; exit ;;
    *" public key") preview_sshkey; exit ;;
    *" certificate") preview_cert; exit ;;
    *" certificate request") preview_csr; exit ;;
    ELF*) preview_elf; exit ;;
esac

extension="${filename##*.}"
# extension="${extension,,}" # lower case - bash4
case "$extension" in
    bz|bz2|gz|lz|lzh|lzma|lzo|tar|tbz|tbz2|tgz|tlz|txz|xz|zst)
        preview_tar; exit ;;
    zip|jar)
        preview_zip; exit ;;
    md)
        preview_markdown; exit ;;
    gpg)
        preview_pgp; exit ;;
    rrd)
        preview_rrd; exit ;;
    html|xhtml)
        preview_htm; exit ;;
    json)
        preview_json; exit ;;
    padl|plist|mom|strings)
        preview_plist; exit ;;
    csv)
        preview_csv; exit ;;
    p12|pfx|pkcs12)
        preview_pkcs; exit ;;
    pkg)
        preview_pkg; exit ;;
    sig|sign)
        preview_pgp_sig; exit ;;
    crl)
        preview_crl | cleanup_openssl; exit ;;
    crt|pem)
        preview_cert; exit ;;
esac

case "$mime_type" in
    application/x-sqlite* )
        preview_sqlite; exit ;;
    application/vnd.sqlite* )
        preview_sqlite; exit ;;
    application/json )
        preview_json; exit ;;
    application/pdf )
        preview_pdf; exit ;;
    application/zip )
        preview_zip; exit ;;
    text/* | */xml | application/postscript )
        preview_txt; exit ;;
    video/* | audio/* | image/* )
        preview_media; exit ;;
esac

preview_binary
