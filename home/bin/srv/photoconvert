#!/usr/bin/env bash

set -eu

# TODO: psd files
# TODO: python rewrite

SRC_DIR=/media/data/photos
DST_DIR=/root/pics_test

convert_dir() {
    local in=$1
    local out=$2
    local size=$3
    local quality=$4

    find "$in_dir" -type f -iname "*.jpg" -or -iname "*.psd" -or -iname "*.tif" -or -iname "*.tiff" -or -iname "*.mp4" -or -iname "*.avi" | sort | grep -Ev '/pano_[0-9_]+/' | while read f; do
        convert_file "$f" "$out_dir/$size/$(basename "$f")" "$size" "$quality"
    done
}

convert_file() {
    local in=$1
    local out=$2
    local size=$3
    local quality=$4

    # skip if existing an non-empty
    [[ -s "$out" || -s "${out%.*}.mp4" ]] && return

    mkdir -vp "$(dirname "$out")"

    printf "%s" "$size :: ${out##*/} "
    if [[ "$in" == *.mp4 || "$in" == *.MP4 || "$in" == *.avi || "$in" == *.AVI ]]; then
        out=${out//.avi/.mp4}
        out=${out//.AVI/.mp4}

        # check if existing in other dirs
        local name="${in##*/}"
        local name="${name%.*}"
        local other=$(find "$DST_DIR" -name "$name.*" -type f)
        if [[ -n "$other" ]]; then
            ln -s "$other" "$out"
        else
            local tmp="$(mktemp -t tmp.XXXXX.mp4)"
            trap "rm -f "$tmp"" INT TERM EXIT

            # -y overwrite, -nostdin to not cause weird issues https://www.igorkromin.net/index.php/2016/12/23/prevent-errors-during-ffmpeg-execution-in-a-loop/
            ffmpeg -nostdin -y \
                -i "$in" \
                -c:v libx264 -preset medium -crf 25 -tune film \
                -filter:v scale=1280:-1 \
                -profile:v high -level 4.0 \
                -pix_fmt yuv420p \
                -c:a aac -b:a 128k \
                -movflags +write_colr \
                "$tmp" > /dev/null 2>&1
            mv "$tmp" "$out"
        fi
    else
        convert "$in" -auto-orient -quality "$quality" -resize "${size}x${size}>" "$out"
    fi

    # remove all metadata
    exiftool -overwrite_original -all= -ifd1:all= -previewimage= -thumbnailimage= "$out" > /dev/null

    local size_after=$(stat -c %s "$out")
    printf "%s\n" ":: $(( size_after/1024 )) KB"
}

main() {
        # 2016/2016-01 2016/2016-02 2016/2016-03 2016/2016-04 2016/2016-05 2016/2016-06 2016/2016-07 2016/2016-08 2016/2016-09 2016/2016-10 2016/2016-11 2016/2016-12 \
        # 2017/2017-01 2017/2017-02 2017/2017-03 2017/2017-04 2017/2017-05 2017/2017-06 2017/2017-07 2017/2017-08 2017/2017-09 2017/2017-10 2017/2017-11 2017/2017-12 \
        # 2018/2018-01 2018/2018-02 2018/2018-03 2018/2018-04 2018/2018-05 2018/2018-06 2018/2018-07 2018/2018-08 2018/2018-09 2018/2018-10 2018/2018-11 2018/2018-12 \
    for date in \
        2019/2019-01 2019/2019-02 2019/2019-03 2019/2019-04 2019/2019-05 2019/2019-06 2019/2019-07 2019/2019-08 2019/2019-09 2019/2019-10 2019/2019-11 2019/2019-12 \
        2020/2020-01 2020/2020-02 2020/2020-03 2020/2020-04 2020/2020-05 2020/2020-06 2020/2020-07 2020/2020-08 2020/2020-09 2020/2020-10 2020/2020-11 2020/2020-12 \
        ; do
        in_dir="$SRC_DIR/$date"
        out_dir="$DST_DIR/$date"
        [[ ! -d "$in_dir" ]] && continue

        echo "------------------------ $date"
        convert_dir "$in_dir" "$out_dir" 1280 60
        convert_dir "$in_dir" "$out_dir" 2560 70
    done
}

main
