#!/usr/bin/env python3

import json
import logging
import os
import glob
import re
import time

from typing import List
import git
import spotipy
import spotipy.util


class Track(object):
    def __init__(self, artist: str, album: str, title: str, url: str) -> None:
        self.artist = artist
        self.album = album
        self.title = title
        self.url = url

    def __str__(self) -> str:
        return f"{self.artist} | {self.title}"


class Playlist(object):
    def __init__(self, name: str, tracks: List[Track]) -> None:
        self.name = name
        self.tracks = tracks

    def dict(self):
        return dict(
            name=self.name,
            tracks=[t.__dict__ for t in self.tracks]
        )

    def markdown(self) -> str:
        s = f"{self.name}\n"
        s += '-' * len(self.name) + "\n\n* " + \
             '\n* '.join([str(t) for t in self.tracks])
        return s + '\n'


def create_tracklist(tracks: dict) -> List[Track]:
    t = []
    for item in tracks['items']:
        track = Track(
            artist=', '.join([a["name"] for a in item['track']['artists']]),
            album=item['track']['album']['name'],
            title=item['track']['name'],
            url=item['track']['external_urls'].get("spotify", "")
        )
        t.append(track)
    return t


def create_playlist(spot: spotipy.Spotify, user: str, playlist: dict) -> Playlist:
    results = spot.user_playlist(user, playlist['id'], fields="tracks,next")
    tracks_result = results['tracks']
    tracks = create_tracklist(tracks_result)
    while tracks_result['next']:
        tracks_result = spot.next(tracks_result)
        tracks += create_tracklist(tracks_result)

    return Playlist(name=playlist['name'], tracks=tracks)


def get_all_playlists(spot: spotipy.Spotify, user: str, exclude_regex: str) -> List[Playlist]:
    all_playlists = []  # type: List[dict]
    playlist_result = spot.user_playlists(user)
    all_playlists += playlist_result['items']
    while playlist_result['next']:
        playlist_result = spot.next(playlist_result)
        all_playlists += playlist_result['items']

    logging.info("fetching playlist contents...")
    # get all self-owned playlists that do not match regex, then sort by name
    rex = re.compile(exclude_regex)
    playlists = sorted(
        filter(lambda p: p['owner']['id'] == user and not re.match(rex, p['name']), all_playlists),
        key=lambda p: p["name"].lower()
    )

    result = []
    total = len(playlists)
    for i, playlist in enumerate(playlists):
        logging.info(f"{i+1}/{total} \"{playlist['name']}\"")
        result.append(create_playlist(spot, user, playlist))
    return result


def maintain_git(repo_path: str, playlists: List[Playlist]):
    repo = git.Repo.init(repo_path)

    # cleanup
    for f in glob.glob(f'{repo_path}/*.json'):
        os.unlink(f)
    for f in glob.glob(f'{repo_path}/*.md'):
        os.unlink(f)

    # prepare markdown + json
    files = {f"{p.name.replace('/', '-')}.md": p.markdown() for p in playlists}
    files.update({f"{p.name.replace('/', '-')}.json": json.dumps(p.dict(), indent=2) + '\n' for p in playlists})

    for f, value in files.items():
        logging.info(f"writing {f}...")
        with open(os.path.expanduser(os.path.join(repo_path, f)), 'w') as fd:
            fd.write(value)

    logging.info(f"add and commit git...")
    repo.git.add('.')
    try:
        repo.git.commit(m="update playlists")
    except git.exc.GitCommandError:
        logging.info(f"no git changes, doing nothing")


def refresh_token(spotify):
    refresh_token = spotify.get_cached_token()['refresh_token']
    new_token = spotify.refresh_access_token(refresh_token)
    return spotipy.spotify(auth=new_token['access_token'])


def main() -> None:
    logging.basicConfig(format='%(asctime)s [%(levelname)s] %(message)s', level=logging.INFO)

    env_exclude_regex = os.environ["SPOT_EXCLUDE"]
    env_repo_dir = os.environ["SPOT_REPO_DIR"]
    env_user = os.environ["SPOT_USER"]

    # cache_path is not working at the moment for prompt_for_user_token(),
    # so set pwd to something persistent instead of shell-pwd
    # FIXME: not working in cron?
    # os.chdir(os.path.expanduser("~/.local/share"))
    os.chdir("/root/.local/share")
    TOKEN = spotipy.util.prompt_for_user_token(
        username=env_user,
        scope='user-library-read',
        client_id=os.environ["SPOT_CLIENT_ID"],
        client_secret=os.environ["SPOT_CLIENT_SECRET"],
        redirect_uri="http://localhost/"
    )
    spotify = spotipy.Spotify(auth=TOKEN)

    logging.info("fetching playlists...")
    try:
        playlists = get_all_playlists(spotify, env_user, env_exclude_regex)
    except spotipy.client.SpotifyException as e:
        logging.warn(f"waiting, then refreshing token... ({e})")
        time.sleep(300)
        spotify = refresh_token(spotify)
        playlists = get_all_playlists(spotify, env_user, env_exclude_regex)

    # write files and maintain git repo
    maintain_git(env_repo_dir, playlists)


if __name__ == '__main__':
    main()

