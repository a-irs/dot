#!/usr/bin/env python3

import subprocess
import logging
import sys

CONFIG = {
    "int": {
        "displays": {
            "DisplayPort-0": "--mode 2560x1440 --auto --rate 69.93",
            "DP-1": "--mode 2560x1440 --auto --rate 69.93"
        },
        "redshift": {
            "temp": '3600',
            "gamma": '0.97:0.97:0.97'
        },
        "pre": [
            "killall -9 kodi-x11 kodi kodi.bin 2>/dev/null"
        ],
        "post": [
            "~/.bin/dpitog 1",
            "nitrogen --restore 2>/dev/null",
        ]
    },
    "ext": {
        "displays": {
            "HDMI-A-0": "--mode 1920x1080 --auto --rate 60.00",
            "HDMI-1": "--mode 1920x1080 --auto --rate 60.00"
        },
        "redshift": {
            "temp": '4600',
            "gamma": '1.0:1.0:1.0'
        },
        "post": [
            "~/.bin/dpitog 3",
            "nitrogen --restore 2>/dev/null",
            "pidof kodi-x11 || exo-open '/usr/share/applications/kodi.desktop'",
            "xdotool set_desktop_for_window \"$(xdotool search --limit 1 --sync --class kodi)\" 6",
            "xdotool set_desktop 6"
        ]
    }
}

def xrandr_is_connected(display: str) -> bool:
    p = subprocess.Popen(f"xrandr | grep -q '^{display}'", shell=True)
    p.wait()
    if p.returncode == 0:
        # logging.warning(f"{display} is connected.")
        return True
    else:
        # logging.warning(f"{display} is NOT connected.")
        return False

def xrandr_is_primary(display: str) -> bool:
    p = subprocess.Popen(f"xrandr | grep -q '^{display}.*primary'", shell=True)
    p.wait()
    if p.returncode == 0:
        logging.warning(f"{display} is primary.")
        return True
    else:
        # logging.warning(f"{display} is NOT primary.")
        return False

def xrandr(args: str):
    logging.warning(f"running: xrandr {args}")
    p = subprocess.Popen(f"xrandr {args}", shell=True)
    p.wait()

def run_hooks(config, stanza):
    for script in config.get(stanza, []):
        logging.warning(f"Running: {script}")
        p = subprocess.Popen(script, shell=True)
        p.wait()

def redshift(temp: str, gamma: str):
    logging.warning(f"running redshift with gamma={gamma} temp={temp}")
    subprocess.Popen(f"sed -E -i 's/^temp-night=.*/temp-night={temp}/' ~/.config/redshift.conf", shell=True)
    subprocess.Popen(f"sed -E -i 's/^gamma=.*/gamma={gamma}/' ~/.config/redshift.conf", shell=True)
    subprocess.Popen("killall redshift; redshift -x; redshift &", shell=True)

def run(active: str, inactive: str, config: dict):
    run_hooks(config[inactive], "pre")

    # set all connected displays to primary + enabled
    for display, c in config[inactive]["displays"].items():
        if xrandr_is_connected(display):
            xrandr(f"--output {display} --primary {c}")

    # disable all other displays
    for display, c in config[active]["displays"].items():
        if xrandr_is_connected(display):
            xrandr(f"--output {display} --off")

    redshift(**config[inactive]["redshift"])
    run_hooks(config[inactive], "post")


def main():
    if len(sys.argv) > 1:
        if sys.argv[1] == "ext":
            active, inactive = "int", "ext"
        elif sys.argv[1] == "int":
            active, inactive = "ext", "int"
    else:
        active, inactive = "ext", "int"
        if any([xrandr_is_primary(display) for display in CONFIG["int"]["displays"].keys()]):
            active, inactive = inactive, active

    run(active=active, inactive=inactive, config=CONFIG)


if __name__ == "__main__":
    main()
