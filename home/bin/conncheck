#!/usr/bin/env bash

TIMEOUT=${1:-2}

ok() { echo "$1: $(tput setaf 2)$2$(tput sgr0)"; }
die() { echo "$1: $(tput setaf 1)$2$(tput sgr0)"; }

check_ip_set() {
    local interface is_set is_interface
    interface=$1
    is_set=1
    is_interface=""

    output=$(ip addr show dev "$interface" 2>/dev/null | grep -oP 'inet [^\s]+')
    output_rc=$?
    if [[ "$output_rc" == 0 ]]; then
        is_set=0
        is_interface="$interface"
        output=$(echo "$output" | cut -d ' ' -f 2)
    fi

    if [[ "$is_set" -eq 0 ]]; then
        ok "IP address" "set for $is_interface ($output)"
    else
        die "IP address" "not set for $interface"
    fi
}

check_ping_gateway() {
    local default_gateway ping_output ping_rc
    default_gateway=$(ip -4 route show 0/0 | grep -oP 'via \S+' | grep -oP '[\d\.]+' | tail -1)
    ping_output=$(ping -w "$TIMEOUT" -c 1 "$default_gateway")
    ping_rc=$?

    if [[ "$ping_rc" != 0 ]]; then
        die "PING default GW $default_gateway" "FAILED"
    else
        ok "PING default GW $default_gateway" "$(echo "$ping_output" | grep -oP 'time=\S+' | grep -oP '\d+' | head -1) ms"
    fi
}

check_traceroute() {
    local dest=$1

    sudo traceroute -q 1 -M tcp -4 "$dest"
}

check_dns() {
    local domain=$1
    local nameserver=$2

    local dig_output dig_time dig_server dig_rc
    if [[ -z "$nameserver" ]]; then
        dig_output=$(dig +noall +stats +timeout="$TIMEOUT" "$domain")
    else
        dig_output=$(dig @"$nameserver" +noall +stats +timeout="$TIMEOUT" "$domain")
    fi
    dig_rc=$?

    dig_time=$(echo "$dig_output" | grep -oP 'Query time: \d+' | grep -oP '\d+')
    dig_server=$(echo "$dig_output" | grep -oP 'SERVER: [\d\.\#]+' | sed 's/SERVER: //')
    if [[ "$dig_rc" != 0 ]]; then
        die "DNS resolve $domain" "FAILED"
    else
        ok "DNS resolve $domain" "$dig_server - ${dig_time} ms"
    fi
}

check_http() {
    local url="$1"

    local curl_output curl_rc
    curl_output=$(curl --connect-timeout "$TIMEOUT" -o /dev/null -s -w '%{time_total}s' "$url")
    curl_rc=$?
    if [[ "$curl_rc" != 0 ]]; then
        die "HTTP GET $url" "FAILED (rc=$curl_rc)"
    else
        ok "HTTP GET $url" "${curl_output}"
    fi
}

get_ip_whois() {
    local ip
    ip=$1

    ext_ip_name=$(dig +short -x "$ip" | rev | cut -d. -f -3 | rev | sed -E 's/^(.*)\.$/\1/')
    if [[ "$ext_ip_name" ]]; then
        ext_whois=$(whois "$ext_ip_name" | grep 'organization:' | awk '{$1=""; print $0}' | xargs)
    else
        whois=$(whois "$ip")
        ext_whois_country=$(echo "$whois" | grep 'country: ' | tail -1 | awk '{$1=""; print $0}' | xargs)
        ext_whois_desc=$(echo "$whois" | grep 'descr: ' | tail -1 | awk '{$1=""; print $0}' | xargs)
        ext_whois="$ext_whois_desc, $ext_whois_country"
    fi
    echo "$ip (name: $ext_ip_name, whois: $ext_whois)"
}

command -v nmcli > /dev/null 2>&1 && { echo ""; nmcli -c yes dev status | grep -v 'unmanaged'; }
echo ""
check_ip_set wg0
check_ip_set wlan0
check_ip_set eth0
echo ""
check_ping_gateway
echo ""
check_traceroute 1.0.0.1
echo ""
check_dns example.com
check_dns google.at 1.0.0.1
check_dns mozilla.org 8.8.8.8
echo ""
check_http http://1.0.0.1
check_http https://8.8.8.8
check_http https://www.example.com/
check_http https://news.ycombinator.com/
echo ""
echo "External IP: $(get_ip_whois "$(curl -s icanhazip.com)")"
echo "External DNS IP: $(get_ip_whois "$(dig +short whoami.akamai.net)")"
