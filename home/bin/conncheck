#!/usr/bin/env bash

set -u

TIMEOUT=${1:-2}

ok() { echo "$1: $(tput setaf 2)$2$(tput sgr0)"; }
die() { echo "$1: $(tput setaf 1)$2$(tput sgr0)"; }

check_ip() {
    local interfaces is_set is_interface
    interfaces=(eth0 wlan0)
    is_set=1
    is_interface=""

    for int in "${interfaces[@]}"; do
        output=$(ip addr show dev "$int" | grep -oP 'inet [^/]+')
        output_rc=$?
        if [[ "$output_rc" == 0 ]]; then
            is_set=0
            is_interface="$int"
            output=$(echo "$output" | cut -d ' ' -f 2)
            break
        fi
    done

    if [[ "$is_set" -eq 0 ]]; then
        ok "IP address" "set for $is_interface: $output"
    else
        die "IP address" "not set for any interface"
        exit 1
    fi
}

check_icmp() {
    local default_gateway ping_output ping_rc
    default_gateway=$(ip -4 route show 0/0 | grep -oP 'via \S+' | grep -oP '[\d\.]+')
    ping_output=$(ping -w "$TIMEOUT" -c 1 "$default_gateway")
    ping_rc=$?

    if [[ "$ping_rc" != 0 ]]; then
        die "PING default GW $default_gateway" "FAILED"
    else
        ok "PING default GW $default_gateway" "$(echo "$ping_output" | grep -oP 'time=\S+' | grep -oP '\d+' | head -1) ms"
    fi
}

check_traceroute() {
    local dest=$1

    sudo traceroute -q 1 -M tcp -4 "$dest"
}

check_dns() {
    local domain=$1

    local dig_output dig_time dig_server dig_rc
    dig_output=$(dig +noall +stats +timeout="$TIMEOUT" "$domain")
    dig_rc=$?

    dig_time=$(echo "$dig_output" | grep -oP 'Query time: \d+' | grep -oP '\d+')
    dig_server=$(echo "$dig_output" | grep -oP 'SERVER: [\d\.\#]+' | sed 's/SERVER: //')
    if [[ "$dig_rc" != 0 ]]; then
        die "DNS resolve $domain" "FAILED"
    else
        ok "DNS resolve $domain" "$dig_server - ${dig_time} ms"
    fi
}

check_http() {
    local url="$1"

    local curl_output curl_rc
    curl_output=$(curl --connect-timeout "$TIMEOUT" -I -o /dev/null -s -w '%{time_connect}s' "$url")
    curl_rc=$?
    if [[ "$curl_rc" != 0 ]]; then
        die "HTTP GET $url" "FAILED"
    else
        ok "HTTP GET $url" "${curl_output}"
    fi
}

check_ip
check_icmp
check_dns example.com
check_http http://1.1.1.1
check_http https://8.8.8.8
echo ""
check_traceroute 1.1.1.1

