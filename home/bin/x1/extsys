#!/usr/bin/env ruby

# TODO:
# - put config in git
# - install arch-chroot
# - rsync-only mode (without formatting etc.)

require 'open3'
require 'yaml'
require 'json'
require 'ostruct'
require 'tmpdir'

CONF = JSON.parse(YAML::load(File.open('extsys.yml')).to_json, object_class: OpenStruct)

def cmd(s, interactive: false)
  puts s
  if interactive then
    Process.fork { exec(s) }
    Process.wait
    puts
  else
    Open3.popen3(s) do |stdin, stdout, stderr, wait_thr|
      puts stdout.read
      puts stderr.read
      if not wait_thr.value.success? then
        raise "CmdException rc=#{wait_thr.value}"
      end
    end
  end
end

def prepare(conf)
  cmd("vgchange -a n vg_extsys || true")
  cmd("pvscan --cache")

  # wipe disk
  cmd("sgdisk -Z #{conf.dest.device}")
  cmd("sgdisk -og #{conf.dest.device}")
  cmd("partprobe #{conf.dest.device}; sleep 2")

  # create partitions
  cmd("sgdisk -n 1:0:+100MB -c 1:\"EFI System Partition\" -t 1:ef00 #{conf.dest.device}")
  cmd("sgdisk -n 2:0:+0 -c 2:\"Linux LUKS\" -t 2:8309 #{conf.dest.device}")

  cmd("partprobe #{conf.dest.device}; sleep 2")

  # setup LUKS
  cmd("cryptsetup luksFormat -q #{conf.dest.device}-part2", interactive: true)
  cmd("cryptsetup open #{conf.dest.device}-part2 EXTSYS_CRYPTO", interactive: true)

  # setup LVM
  cmd("pvcreate /dev/mapper/EXTSYS_CRYPTO")
  cmd("vgcreate vg_extsys /dev/mapper/EXTSYS_CRYPTO")
  cmd("lvcreate -l 100%FREE vg_extsys -n lv_extsys")

  # format file systems
  cmd("mkfs.fat -F32 -n EXTSYS_BOOT #{conf.dest.device}-part1")
  cmd("mkfs.ext4 -L EXTSYS /dev/vg_extsys/lv_extsys")

  cmd("partprobe #{conf.dest.device}; sleep 2")
end

def rsync(conf, mount)
  conf.copy.each do |item|
    rsync_command = "rsync -aHx --delete"
    item.exclude.each do |exclude|
      rsync_command = rsync_command + " --exclude #{exclude}"
    end
    rsync_command = "#{rsync_command} #{item.src}/ #{mount}/#{item.dest}"

    cmd(rsync_command)
  end
end

def write_fstab(conf, mount)
  s = %{
LABEL=EXTSYS / ext4 defaults 0 1
LABEL=EXTSYS_BOOT /boot vfat defaults 0 2
}
  File.write("#{mount}/etc/fstab", s)
end

def write_hostname(conf, mount)
  File.write("#{mount}/etc/hostname", "EXTSYS")
end

def write_boot(conf, mount)
  cmd("grub-install --target=x86_64-efi --recheck --removable --efi-directory=#{mount}/boot --boot-directory=#{mount}/boot")

  uuid = cmd("sleep 2; blkid -o value -s UUID #{conf.dest.device}-part2")
  s = %{
  insmod part_gpt
  insmod part_msdos
  insmod all_video

  set gfxmode=auto
  load_video
  insmod gfxterm

  menuentry 'EXTSYS' {
    set gfxpayload=keep
    insmod gzio
    insmod part_gpt
    set root='hd0,gpt1'
    search --no-floppy --label --set=root EXTSYS_BOOT
    linux /vmlinuz-linux root=/dev/mapper/vg_extsys-lv_extsys rw ipv6.disable=1 rd.luks.name=#{uuid}=EXTSYS_CRYPTO
    initrd /initramfs-linux-fallback.img
  }
}
  File.write("#{mount}/boot/grub/grub.cfg", s)

  cmd("mkinitcpio -g #{mount}/boot/initramfs-linux-fallback.img -S autodetect")
end

def main()
  prepare(CONF)

  Dir.mktmpdir do |mount|
    cmd("mount /dev/disk/by-label/EXTSYS #{mount}")
    cmd("mkdir -p #{mount}/boot")
    cmd("mkdir -p #{mount}/home")
    cmd("mount /dev/disk/by-label/EXTSYS_BOOT #{mount}/boot")

    rsync(CONF, mount)
    write_fstab(CONF, mount)
    write_hostname(CONF, mount)
    write_boot(CONF, mount)

    cmd("rm -f #{mount}/usr/lib/systemd/system/tlp.service")
    cmd("rm -f #{mount}/home/*/.zprofile*")  # disable auto-startx

    # cleanup
    cmd("umount -l #{mount}/boot")
    cmd("umount -l #{mount}")
  end

  cmd("vgchange -a n vg_extsys || true")
  cmd("cryptsetup close EXTSYS_CRYPTO")
  cmd("pvscan --cache")
end

main
