#!/usr/bin/env ruby

# TODO:
# - port back to bash?

require 'open3'
require 'yaml'
require 'json'
require 'ostruct'
require 'tmpdir'

def cmd(s, interactive: false)
  puts s
  if interactive then
    Process.fork { exec(s) }
    Process.wait
    puts
  else
    Open3.popen3(s) do |stdin, stdout, stderr, wait_thr|
      so = stdout.read.chomp
      se = stderr.read.chomp
      puts so
      puts se
      if not wait_thr.value.success? then
        raise "CmdException rc=#{wait_thr.value}"
      end
      return so
    end
  end
end

def prepare(conf)
  #
  # wipes and formats the drive
  #

  cmd("vgchange -a n vg_extsys || true")
  cmd("pvscan --cache")

  # wipe disk
  cmd("sgdisk -Z #{conf.dest.device}")
  cmd("sgdisk -og #{conf.dest.device}")
  cmd("partprobe #{conf.dest.device}; sleep 2")

  # create partitions
  cmd("sgdisk -n 1:0:+#{conf.dest.sizes.boot} -t 1:ef00 #{conf.dest.device}")
  cmd("sgdisk -n 2:0:+#{conf.dest.sizes.luks} -t 2:8309 #{conf.dest.device}")
  cmd("sgdisk -n 3:0:+0 -c 3:EXTSYS_DATA -t 3:0700 #{conf.dest.device}")  # rest: unencrypted data

  cmd("partprobe #{conf.dest.device}; sleep 2")

  # setup LUKS
  cmd("cryptsetup luksFormat --type luks2 -q #{conf.dest.device}-part2", interactive: true)
  cmd("cryptsetup open #{conf.dest.device}-part2 EXTSYS_CRYPTO", interactive: true)

  # setup LVM
  cmd("pvcreate /dev/mapper/EXTSYS_CRYPTO")
  cmd("vgcreate vg_extsys /dev/mapper/EXTSYS_CRYPTO")
  cmd("lvcreate -l 100%FREE vg_extsys -n lv_extsys")

  # format file systems
  cmd("mkfs.fat -F32 -n EXTSYS_EFI #{conf.dest.device}-part1")
  cmd("mkfs.#{conf.dest.filesystem.name} -L EXTSYS /dev/vg_extsys/lv_extsys")
  cmd("mkexfatfs -n EXTSYS_DATA #{conf.dest.device}-part3")

  cmd("partprobe #{conf.dest.device}; sleep 2")
end


def rsync(conf, mount)
  #
  # rsync data to mount point
  #

  rsync_command = "rsync -aHAX -v --delete"
  conf.exclude.each do |exclude|
    rsync_command = rsync_command + " --exclude '#{exclude}'"
  end
  # implicit excludes
  rsync_command = "#{rsync_command} --exclude /dev --exclude /proc --exclude /run --exclude /sys --exclude /tmp --exclude /.snapshots --exclude '/lost+found' --exclude '/*/lost+found' --exclude /mnt --exclude /media --exclude /efi --exclude /boot"

  rsync_command = "#{rsync_command} / #{mount}"

  cmd(rsync_command)
end

def mount(conf, mount)
  #
  # mounts partitions
  #

  cmd("cryptsetup open #{conf.dest.device}-part2 EXTSYS_CRYPTO", interactive: true)
  cmd("partprobe #{conf.dest.device}; sleep 2")
  cmd("lvchange -a y /dev/vg_extsys/lv_extsys")

  cmd("mount /dev/disk/by-label/EXTSYS -o #{conf.dest.filesystem.options} #{mount}")
  cmd("mkdir -p #{mount}/efi")
  cmd("mount /dev/disk/by-label/EXTSYS_EFI #{mount}/efi")
  cmd("sleep 2")
end

def umount(conf, mount)
  #
  # unmounts and closes everything
  #

  cmd("umount -f --recursive #{mount} || true")
  cmd("vgchange -a n vg_extsys || true")
  cmd("cryptsetup close EXTSYS_CRYPTO || true")
  cmd("pvscan --cache || true")
end

def write_fstab(conf, mount)
  #
  # writes fstab
  #

  s = %{
LABEL=EXTSYS / #{conf.dest.filesystem.name} #{conf.dest.filesystem.options} 0 0
LABEL=EXTSYS_EFI /efi vfat defaults 0 0
}
  File.write("#{mount}/etc/fstab", s)
end

def write_hostname(conf, mount)
  timestamp = cmd("date +%F")
  File.write("#{mount}/etc/hostname", "EXTSYS-#{timestamp}")
end

def write_initramfs(conf, mount)
  Dir.mktmpdir do |tmp|
    # FIXME: don't write to tmp, simply to destination mount! so mkinit/kernel-updates etc. work inside booted system as well
    # note: systemd hooks do not work here (they do not run latehooks apparently), so use the default arch linux busybox hooks here
    File.write("#{tmp}/mkinitcpio.conf", %{
    HOOKS=(base systemd sd-vconsole keyboard autodetect block sd-encrypt lvm2 filesystems)
    })

    uuid = cmd("blkid -c /dev/null -o value -s UUID #{conf.dest.device}-part2")
    File.write("#{tmp}/cmdline", %{
    rd.luks.name=#{uuid}=EXTSYS_CRYPTO root=/dev/disk/by-label/EXTSYS rw
    })

    # build UEFI executable / unified kernel image (fallback version, with all modules included)
    cmd("mkdir -p #{mount}/efi/EFI/BOOT")
    cmd("mkinitcpio --skiphooks autodetect --config #{tmp}/mkinitcpio.conf --cmdline #{tmp}/cmdline --uefi #{mount}/efi/EFI/BOOT/BOOTX64.EFI")

    # sign with own keys for UEFI secure boot
    cmd("sbctl sign #{mount}/efi/EFI/BOOT/BOOTX64.EFI")
  end
end

def main()
  conf = JSON.parse(YAML::load(File.open(__dir__ + '/extsys.yml')).to_json, object_class: OpenStruct)
  conf.dest.device = Dir.glob(conf.dest.device)[0]

  if ARGV[0] == "boot" then
    cmd("qemu-system-x86_64 -drive file=/usr/share/ovmf/x64/OVMF.fd,if=pflash,format=raw,unit=0,readonly=on -net none -m 2G -enable-kvm -cpu host -usb -device usb-tablet -display gtk -vga virtio -drive format=raw,index=0,media=disk,file=#{conf.dest.device}", interactive: true)
    exit
  end

  Dir.mktmpdir do |mount|

    if ARGV[0] == "prepare" then
      prepare(conf)
    end

    begin
      mount(conf, mount)
      rsync(conf, mount)
      write_fstab(conf, mount)
      write_hostname(conf, mount)
      write_initramfs(conf, mount)

      conf.postcommands.each do |postcommand|
        cmd(postcommand.gsub(/\$MOUNT\$/, mount))
      end

    ensure
      umount(conf, mount)
    end
  end

end

main
