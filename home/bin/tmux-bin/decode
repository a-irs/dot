#!/usr/bin/env python3

import base64
import binascii
from datetime import datetime
import re
import subprocess
import sys


def trunc(s: str, limit=60) -> str:
    if len(s) <= limit - 1:
        return s
    else:
        return f"{s[0:limit]}â€¦"


def msg(header: str, s: str):
    line_num = len(s.splitlines())
    if line_num > 1:
        msg = f"{header}\n{'-'*len(header)}\n{s.rstrip()}"
        print(msg)
    else:
        msg = f"{header}: {s}"
        subprocess.run(["tmux", "display-message", "-d0", "--", msg])
    sys.exit(0)


def get_base64(s: str) -> bytes | None:
    try:
        decoded = base64.b64decode(s)
        if base64.b64encode(decoded).decode() == s:
            return decoded
    except (binascii.Error, ValueError):
        pass


def try_epoch(buffer: str):
    epoch_matches = list(map(int, re.findall(r"\b[0-9]{10}\b", buffer)))
    if epoch_matches:
        dates = []
        for epoch in epoch_matches:
            dates.append(
                f"{datetime.fromtimestamp(epoch).strftime('%Y-%m-%d (%A) %H:%M:%S')} ({epoch})"
            )
        msg("Epoch", "\n".join(dates))


def try_cert(buffer: str):
    cert_match = re.search(r"-----BEGIN CERTIFICATE-----.*-----END CERTIFICATE-----", buffer, re.DOTALL)
    if cert_match:
        output = subprocess.run(["openssl", "x509", "-text", "-noout"], capture_output=True, text=True, input=cert_match.group(0), check=True).stdout.rstrip()
        msg("Certificate", output)


def try_base64(buffer: str):
    base64_match = [x for x in re.findall(r"(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?", buffer) if x]
    if base64_match:
        base64_decoded = get_base64(base64_match[0])
        if base64_decoded:
            try:
                s = base64_decoded.decode()
                msg("Base64", s)
            except ValueError:
                xxd = subprocess.run(
                    ["xxd", "-a"], input=base64_decoded, capture_output=True, check=True
                ).stdout.decode()

                file = subprocess.run(
                    ["file", "-Lb", "-"], input=base64_decoded, capture_output=True, check=True
                ).stdout.decode().strip()

                msg(f"Base64 binary ({file})", xxd)



def main():
    buffer = subprocess.run(
        ["tmux", "show-buffer"], capture_output=True, check=True, text=True
    ).stdout.rstrip()

    try_cert(buffer)
    try_epoch(buffer)
    try_base64(buffer)

    msg("Warning", f"nothing found in buffer '{trunc(buffer)}'")


if __name__ == "__main__":
    main()
