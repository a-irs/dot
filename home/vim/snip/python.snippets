snippet "run|subprocess|shell|exec" "subprocess" br
import subprocess

try:
    process = subprocess.run(["ls", "-l"], capture_output=True, check=True, text=True)
    print([
        process.stdout,
        process.stderr,
        process.returncode
    ])

# throws subprocess.CalledProcessError if process.returncode != 0
# throws FileNotFoundError if command is not in PATH
except subprocess.CalledProcessError as e:
    print(e.output, e.stderr, e.returncode)
endsnippet


snippet "arg|args" "argparse" br
# https://docs.python.org/3/library/argparse.html
import argparse

def cli_args() -> argparse.Namespace:
    p = argparse.ArgumentParser(description="desc 123", allow_abbrev=False)
    p.add_argument('--arg1', '-a', help="help text 1", required=True)
    p.add_argument('--enable_feature_xyz', help="toggle for %(prog)s", action='store_true', default=False)
    p.add_argument('--count', help="has to be %(type)s (default: %(default)s)", type=int, default=10)
    p.add_argument('--verbose', '-v', help="store count of used args", action='count', default=0)
    p.add_argument('--choose1', choices=["this", "that"])
    p.add_argument('--choose2', type=int, choices=range(1, 6))
    p.add_argument('--optarg', nargs='?', help="optional")
    p.add_argument('--multiarg', nargs='+', help="can be specified multiple times, at least 1")
    p.add_argument('--multiarg_opt', nargs='*', help="can be specified multiple times, at least 0")
    p.add_argument('--file_out', type=argparse.FileType('w'), default=sys.stdout)
    p.add_argument('--file_in', type=argparse.FileType('r'), default=sys.stdin)
    return p.parse_args()
endsnippet


snippet "main" "main method" br
def main():
    ${1:${VISUAL}}

if __name__ == "__main__":
    main()
endsnippet

snippet "dc|dataclass" "dataclass" br
from dataclasses import dataclass

@dataclass
class ${1:Point}:
    x: int
    y: int = 0
    description: str = ""
endsnippet

snippet "raise|throw|exc" "exception" br
# https://docs.python.org/3/library/exceptions.html#base-classes
raise ValueError('Error message')
endsnippet

snippet "tmp|temp" "temporary" br
import tempfile

with tempfile.NamedTemporaryFile('w') as temp:
    temp.write("content")
    temp.flush()
endsnippet

snippet "defaultdict" "defaultdict" br
import collections

d = collections.defaultdict(int)
endsnippet

snippet "b|br|break" "breakpoint" br
breakpoint()
endsnippet

snippet "b2|br2|break2" "breakpoint old" br
import pdb; pdb.set_trace()
endsnippet

snippet "fori" "enumerate" br
for i, item in enumerate(${1:list}):
    print(f"{i}={item}")
endsnippet

snippet "fore" "iterate over iterable" br
for item in ${1:list}:
    print(f"{item}")
endsnippet

snippet "ford" "iterate over dict" br
for key, value in ${1:dict_obj}.items():
    print(f"{key}={value}")
endsnippet

snippet "class" "class" br
class ${1:ClassName}(object):
    def __init__(self):
        pass
    def __str__(self):
        return str("<{}: {}>".format(type(self).__name__, vars(self)))
endsnippet

snippet "jsonp" "json print" br
json.dumps(${1:item}, indent=2)
endsnippet

snippet "jsonr" "json read" br
with open('${1:filename}', 'r') as fd:
    data = json.load(fd)
endsnippet

snippet "jsonw" "json write" br
with open('${1:filename}', 'w') as fd:
    json.dump(data, fd)
endsnippet

snippet "csv2py" "csv to python object" br
import csv
with open("file.csv", 'r') as fd:
    reader = csv.DictReader(fd, delimiter=';')
    for d in reader:
        print(d)
endsnippet
